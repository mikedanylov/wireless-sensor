
NRF24-TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001532  000015c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800126  00800126  000015ec  2**0
                  ALLOC
  3 .stab         00006138  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002147  00000000  00000000  00007724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000042  00000000  00000000  0000986b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e3       	ldi	r30, 0x32	; 50
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 32       	cpi	r26, 0x26	; 38
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e2       	ldi	r26, 0x26	; 38
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 32       	cpi	r26, 0x2E	; 46
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 41 01 	call	0x282	; 0x282 <main>
      9e:	0c 94 97 0a 	jmp	0x152e	; 0x152e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC>:
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	8c e7       	ldi	r24, 0x7C	; 124
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2c e7       	ldi	r18, 0x7C	; 124
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 64       	ori	r18, 0x40	; 64
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
      c0:	8a e7       	ldi	r24, 0x7A	; 122
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2a e7       	ldi	r18, 0x7A	; 122
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	24 60       	ori	r18, 0x04	; 4
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
      d2:	8a e7       	ldi	r24, 0x7A	; 122
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	2a e7       	ldi	r18, 0x7A	; 122
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	22 60       	ori	r18, 0x02	; 2
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
      e4:	8a e7       	ldi	r24, 0x7A	; 122
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a e7       	ldi	r18, 0x7A	; 122
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	21 60       	ori	r18, 0x01	; 1
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
      f6:	8a e7       	ldi	r24, 0x7A	; 122
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2a e7       	ldi	r18, 0x7A	; 122
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	20 68       	ori	r18, 0x80	; 128
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <ReadADC>:
which protects from unintentional alteration of ADMUX register.
After channel is selected we start single conversion by setting ADSC bit in ADCSRA register.
This bit remains high until conversion is complete.
So we are going to use this bit as indicator to decide when data is ready.
So we return ADC value after ADSC bit is reset. */
uint16_t ReadADC(uint8_t ADCchannel){
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	1f 92       	push	r1
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	89 83       	std	Y+1, r24	; 0x01
 //select ADC channel with safety mask
 ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     11a:	8c e7       	ldi	r24, 0x7C	; 124
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	2c e7       	ldi	r18, 0x7C	; 124
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	32 2f       	mov	r19, r18
     128:	30 7f       	andi	r19, 0xF0	; 240
     12a:	29 81       	ldd	r18, Y+1	; 0x01
     12c:	2f 70       	andi	r18, 0x0F	; 15
     12e:	23 2b       	or	r18, r19
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
 // put ADC to sleep mode
 MCUCR |= 1<<SM0;
     134:	85 e5       	ldi	r24, 0x55	; 85
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	25 e5       	ldi	r18, 0x55	; 85
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	22 60       	ori	r18, 0x02	; 2
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
 MCUCR |= 1<<SE;
     146:	85 e5       	ldi	r24, 0x55	; 85
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e5       	ldi	r18, 0x55	; 85
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	21 60       	ori	r18, 0x01	; 1
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
 //single conversion mode
 ADCSRA |= (1<<ADSC);
     158:	8a e7       	ldi	r24, 0x7A	; 122
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	2a e7       	ldi	r18, 0x7A	; 122
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	20 64       	ori	r18, 0x40	; 64
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
 // wait until ADC conversion is complete
 while( ADCSRA & (1<<ADSC) );
     16a:	00 00       	nop
     16c:	8a e7       	ldi	r24, 0x7A	; 122
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	fc 01       	movw	r30, r24
     172:	80 81       	ld	r24, Z
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 74       	andi	r24, 0x40	; 64
     17a:	99 27       	eor	r25, r25
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	b1 f7       	brne	.-20     	; 0x16c <ReadADC+0x5e>
 return ADC;
     180:	88 e7       	ldi	r24, 0x78	; 120
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	80 81       	ld	r24, Z
     188:	91 81       	ldd	r25, Z+1	; 0x01
}
     18a:	0f 90       	pop	r0
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <double_to_string>:
double VSTEP = 10;
double ADCRES = 1024;
double calibr = 1.1;
uint8_t CH0 = 0; // ADC channel 0 PORTC0, pin 23 on 328p

char* double_to_string(double number){
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	28 97       	sbiw	r28, 0x08	; 8
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	6d 83       	std	Y+5, r22	; 0x05
     1a8:	7e 83       	std	Y+6, r23	; 0x06
     1aa:	8f 83       	std	Y+7, r24	; 0x07
     1ac:	98 87       	std	Y+8, r25	; 0x08
	int round;
	int reminder;

	round = number;
     1ae:	6d 81       	ldd	r22, Y+5	; 0x05
     1b0:	7e 81       	ldd	r23, Y+6	; 0x06
     1b2:	8f 81       	ldd	r24, Y+7	; 0x07
     1b4:	98 85       	ldd	r25, Y+8	; 0x08
     1b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fixsfsi>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	9c 83       	std	Y+4, r25	; 0x04
     1c0:	8b 83       	std	Y+3, r24	; 0x03
	reminder = (number - round) * 100;
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	aa 27       	eor	r26, r26
     1c8:	97 fd       	sbrc	r25, 7
     1ca:	a0 95       	com	r26
     1cc:	ba 2f       	mov	r27, r26
     1ce:	bc 01       	movw	r22, r24
     1d0:	cd 01       	movw	r24, r26
     1d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__floatsisf>
     1d6:	dc 01       	movw	r26, r24
     1d8:	cb 01       	movw	r24, r22
     1da:	9c 01       	movw	r18, r24
     1dc:	ad 01       	movw	r20, r26
     1de:	6d 81       	ldd	r22, Y+5	; 0x05
     1e0:	7e 81       	ldd	r23, Y+6	; 0x06
     1e2:	8f 81       	ldd	r24, Y+7	; 0x07
     1e4:	98 85       	ldd	r25, Y+8	; 0x08
     1e6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__subsf3>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	48 ec       	ldi	r20, 0xC8	; 200
     1f4:	52 e4       	ldi	r21, 0x42	; 66
     1f6:	bc 01       	movw	r22, r24
     1f8:	cd 01       	movw	r24, r26
     1fa:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	bc 01       	movw	r22, r24
     204:	cd 01       	movw	r24, r26
     206:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fixsfsi>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	89 83       	std	Y+1, r24	; 0x01
	if (reminder < 0) // display negative temperature properly
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	99 23       	and	r25, r25
     218:	3c f4       	brge	.+14     	; 0x228 <double_to_string+0x96>
		reminder *= -1;
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	9a 81       	ldd	r25, Y+2	; 0x02
     21e:	91 95       	neg	r25
     220:	81 95       	neg	r24
     222:	91 09       	sbc	r25, r1
     224:	9a 83       	std	Y+2, r25	; 0x02
     226:	89 83       	std	Y+1, r24	; 0x01
	sprintf(buffer, "%02d.%02d C", round, reminder);
     228:	80 91 2b 01 	lds	r24, 0x012B
     22c:	90 91 2c 01 	lds	r25, 0x012C
     230:	2a 81       	ldd	r18, Y+2	; 0x02
     232:	2f 93       	push	r18
     234:	29 81       	ldd	r18, Y+1	; 0x01
     236:	2f 93       	push	r18
     238:	2c 81       	ldd	r18, Y+4	; 0x04
     23a:	2f 93       	push	r18
     23c:	2b 81       	ldd	r18, Y+3	; 0x03
     23e:	2f 93       	push	r18
     240:	29 e1       	ldi	r18, 0x19	; 25
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	23 2f       	mov	r18, r19
     246:	2f 93       	push	r18
     248:	29 e1       	ldi	r18, 0x19	; 25
     24a:	31 e0       	ldi	r19, 0x01	; 1
     24c:	2f 93       	push	r18
     24e:	29 2f       	mov	r18, r25
     250:	2f 93       	push	r18
     252:	8f 93       	push	r24
     254:	0e 94 c6 07 	call	0xf8c	; 0xf8c <sprintf>
     258:	8d b7       	in	r24, 0x3d	; 61
     25a:	9e b7       	in	r25, 0x3e	; 62
     25c:	08 96       	adiw	r24, 0x08	; 8
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
	return buffer;
     268:	80 91 2b 01 	lds	r24, 0x012B
     26c:	90 91 2c 01 	lds	r25, 0x012C
}
     270:	28 96       	adiw	r28, 0x08	; 8
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <main>:

int main(){
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62

	InitADC();
     292:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC>
	nrf24_init();
     296:	0e 94 0f 02 	call	0x41e	; 0x41e <nrf24_init>

	/* Channel #2 , payload length: 4 */
	nrf24_config(2,4);
     29a:	64 e0       	ldi	r22, 0x04	; 4
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 1e 02 	call	0x43c	; 0x43c <nrf24_config>
	/* Set the device addresses */
	nrf24_tx_address(tx_address);
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 87 02 	call	0x50e	; 0x50e <nrf24_tx_address>
	//nrf24_rx_address(rx_address);

	while(1){
		// reading + displaying temperature
		Temperature = ((ReadADC(CH0) - ADCRES * VZERO/VREF) * VREF/ADCRES * calibr) / VSTEP;
     2aa:	80 91 26 01 	lds	r24, 0x0126
     2ae:	0e 94 87 00 	call	0x10e	; 0x10e <ReadADC>
     2b2:	cc 01       	movw	r24, r24
     2b4:	a0 e0       	ldi	r26, 0x00	; 0
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	bc 01       	movw	r22, r24
     2ba:	cd 01       	movw	r24, r26
     2bc:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
     2c0:	6b 01       	movw	r12, r22
     2c2:	7c 01       	movw	r14, r24
     2c4:	80 91 11 01 	lds	r24, 0x0111
     2c8:	90 91 12 01 	lds	r25, 0x0112
     2cc:	a0 91 13 01 	lds	r26, 0x0113
     2d0:	b0 91 14 01 	lds	r27, 0x0114
     2d4:	20 91 09 01 	lds	r18, 0x0109
     2d8:	30 91 0a 01 	lds	r19, 0x010A
     2dc:	40 91 0b 01 	lds	r20, 0x010B
     2e0:	50 91 0c 01 	lds	r21, 0x010C
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	20 91 05 01 	lds	r18, 0x0105
     2f4:	30 91 06 01 	lds	r19, 0x0106
     2f8:	40 91 07 01 	lds	r20, 0x0107
     2fc:	50 91 08 01 	lds	r21, 0x0108
     300:	bc 01       	movw	r22, r24
     302:	cd 01       	movw	r24, r26
     304:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__divsf3>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	9c 01       	movw	r18, r24
     30e:	ad 01       	movw	r20, r26
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__subsf3>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	20 91 05 01 	lds	r18, 0x0105
     320:	30 91 06 01 	lds	r19, 0x0106
     324:	40 91 07 01 	lds	r20, 0x0107
     328:	50 91 08 01 	lds	r21, 0x0108
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	20 91 11 01 	lds	r18, 0x0111
     33c:	30 91 12 01 	lds	r19, 0x0112
     340:	40 91 13 01 	lds	r20, 0x0113
     344:	50 91 14 01 	lds	r21, 0x0114
     348:	bc 01       	movw	r22, r24
     34a:	cd 01       	movw	r24, r26
     34c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__divsf3>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	20 91 15 01 	lds	r18, 0x0115
     358:	30 91 16 01 	lds	r19, 0x0116
     35c:	40 91 17 01 	lds	r20, 0x0117
     360:	50 91 18 01 	lds	r21, 0x0118
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     36c:	dc 01       	movw	r26, r24
     36e:	cb 01       	movw	r24, r22
     370:	20 91 0d 01 	lds	r18, 0x010D
     374:	30 91 0e 01 	lds	r19, 0x010E
     378:	40 91 0f 01 	lds	r20, 0x010F
     37c:	50 91 10 01 	lds	r21, 0x0110
     380:	bc 01       	movw	r22, r24
     382:	cd 01       	movw	r24, r26
     384:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__divsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	80 93 27 01 	sts	0x0127, r24
     390:	90 93 28 01 	sts	0x0128, r25
     394:	a0 93 29 01 	sts	0x0129, r26
     398:	b0 93 2a 01 	sts	0x012A, r27
		Temperature = roundf(Temperature * 100) / 100; // round to 2 decimal places
     39c:	80 91 27 01 	lds	r24, 0x0127
     3a0:	90 91 28 01 	lds	r25, 0x0128
     3a4:	a0 91 29 01 	lds	r26, 0x0129
     3a8:	b0 91 2a 01 	lds	r27, 0x012A
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	48 ec       	ldi	r20, 0xC8	; 200
     3b2:	52 e4       	ldi	r21, 0x42	; 66
     3b4:	bc 01       	movw	r22, r24
     3b6:	cd 01       	movw	r24, r26
     3b8:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	bc 01       	movw	r22, r24
     3c2:	cd 01       	movw	r24, r26
     3c4:	0e 94 7d 07 	call	0xefa	; 0xefa <round>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	48 ec       	ldi	r20, 0xC8	; 200
     3d2:	52 e4       	ldi	r21, 0x42	; 66
     3d4:	bc 01       	movw	r22, r24
     3d6:	cd 01       	movw	r24, r26
     3d8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__divsf3>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	80 93 27 01 	sts	0x0127, r24
     3e4:	90 93 28 01 	sts	0x0128, r25
     3e8:	a0 93 29 01 	sts	0x0129, r26
     3ec:	b0 93 2a 01 	sts	0x012A, r27
		buffer = double_to_string(Temperature);
     3f0:	80 91 27 01 	lds	r24, 0x0127
     3f4:	90 91 28 01 	lds	r25, 0x0128
     3f8:	a0 91 29 01 	lds	r26, 0x0129
     3fc:	b0 91 2a 01 	lds	r27, 0x012A
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	0e 94 c9 00 	call	0x192	; 0x192 <double_to_string>
     408:	90 93 2c 01 	sts	0x012C, r25
     40c:	80 93 2b 01 	sts	0x012B, r24
		/* Automatically goes to TX mode */
		nrf24_send((uint8_t*)buffer);
     410:	80 91 2b 01 	lds	r24, 0x012B
     414:	90 91 2c 01 	lds	r25, 0x012C
     418:	0e 94 1c 03 	call	0x638	; 0x638 <nrf24_send>
	}
     41c:	46 cf       	rjmp	.-372    	; 0x2aa <main+0x28>

0000041e <nrf24_init>:

uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
     426:	0e 94 ce 04 	call	0x99c	; 0x99c <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	00 d0       	rcall	.+0      	; 0x442 <nrf24_config+0x6>
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	89 83       	std	Y+1, r24	; 0x01
     448:	6a 83       	std	Y+2, r22	; 0x02
    /* Use static payload length ... */
    payload_len = pay_length;
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	80 93 2d 01 	sts	0x012D, r24

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
     450:	69 81       	ldd	r22, Y+1	; 0x01
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	81 e1       	ldi	r24, 0x11	; 17
     45c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
     460:	80 91 2d 01 	lds	r24, 0x012D
     464:	68 2f       	mov	r22, r24
     466:	82 e1       	ldi	r24, 0x12	; 18
     468:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	83 e1       	ldi	r24, 0x13	; 19
     470:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	84 e1       	ldi	r24, 0x14	; 20
     478:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	85 e1       	ldi	r24, 0x15	; 21
     480:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	86 e1       	ldi	r24, 0x16	; 22
     488:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
     48c:	66 e0       	ldi	r22, 0x06	; 6
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
     494:	68 e0       	ldi	r22, 0x08	; 8
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
     49c:	63 e0       	ldi	r22, 0x03	; 3
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
     4a4:	63 e0       	ldi	r22, 0x03	; 3
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
     4ac:	6f e4       	ldi	r22, 0x4F	; 79
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	8c e1       	ldi	r24, 0x1C	; 28
     4b8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
     4bc:	0e 94 92 03 	call	0x724	; 0x724 <nrf24_powerUpRx>
}
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <nrf24_rx_address+0x6>
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	9a 83       	std	Y+2, r25	; 0x02
     4d6:	89 83       	std	Y+1, r24	; 0x01
    nrf24_ce_digitalWrite(LOW);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	45 e0       	ldi	r20, 0x05	; 5
     4e4:	bc 01       	movw	r22, r24
     4e6:	8b e0       	ldi	r24, 0x0B	; 11
     4e8:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <nrf24_payload_length>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
    return payload_len;
     504:	80 91 2d 01 	lds	r24, 0x012D
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <nrf24_tx_address>:

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <nrf24_tx_address+0x6>
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	45 e0       	ldi	r20, 0x05	; 5
     522:	bc 01       	movw	r22, r24
     524:	8a e0       	ldi	r24, 0x0A	; 10
     526:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	45 e0       	ldi	r20, 0x05	; 5
     530:	bc 01       	movw	r22, r24
     532:	80 e1       	ldi	r24, 0x10	; 16
     534:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24_writeRegister>
}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	1f 92       	push	r1
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
     54c:	0e 94 5f 03 	call	0x6be	; 0x6be <nrf24_getStatus>
     550:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	80 74       	andi	r24, 0x40	; 64
     55a:	99 27       	eor	r25, r25
     55c:	00 97       	sbiw	r24, 0x00	; 0
     55e:	11 f0       	breq	.+4      	; 0x564 <nrf24_dataReady+0x22>
    {
        return 1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	07 c0       	rjmp	.+14     	; 0x572 <nrf24_dataReady+0x30>
    }

    return !nrf24_rxFifoEmpty();;
     564:	0e 94 bd 02 	call	0x57a	; 0x57a <nrf24_rxFifoEmpty>
     568:	98 2f       	mov	r25, r24
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	99 23       	and	r25, r25
     56e:	09 f0       	breq	.+2      	; 0x572 <nrf24_dataReady+0x30>
     570:	80 e0       	ldi	r24, 0x00	; 0
}
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	1f 92       	push	r1
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	bc 01       	movw	r22, r24
     58c:	87 e1       	ldi	r24, 0x17	; 23
     58e:	0e 94 8a 04 	call	0x914	; 0x914 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	81 70       	andi	r24, 0x01	; 1
}
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <nrf24_payloadLength>:

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	1f 92       	push	r1
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    nrf24_csn_digitalWrite(LOW);
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    spi_transfer(R_RX_PL_WID);
     5ae:	80 e6       	ldi	r24, 0x60	; 96
     5b0:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    status = spi_transfer(0x00);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
     5ba:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    return status;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <nrf24_getData>:

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <nrf24_getData+0x6>
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
     5e0:	81 e6       	ldi	r24, 0x61	; 97
     5e2:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
     5e6:	40 91 2d 01 	lds	r20, 0x012D
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	3a 81       	ldd	r19, Y+2	; 0x02
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	b9 01       	movw	r22, r18
     5f4:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
     5fe:	60 e4       	ldi	r22, 0x40	; 64
     600:	87 e0       	ldi	r24, 0x07	; 7
     602:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
}
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <nrf24_retransmissionCount>:

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	1f 92       	push	r1
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	bc 01       	movw	r22, r24
     622:	88 e0       	ldi	r24, 0x08	; 8
     624:	0e 94 8a 04 	call	0x914	; 0x914 <nrf24_readRegister>
    rv = rv & 0x0F;
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	89 83       	std	Y+1, r24	; 0x01
    return rv;
     62e:	89 81       	ldd	r24, Y+1	; 0x01
}
     630:	0f 90       	pop	r0
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <nrf24_send>:

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	00 d0       	rcall	.+0      	; 0x63e <nrf24_send+0x6>
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
     64c:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
     656:	81 ee       	ldi	r24, 0xE1	; 225
     658:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
     668:	80 ea       	ldi	r24, 0xA0	; 160
     66a:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
     66e:	20 91 2d 01 	lds	r18, 0x012D
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	62 2f       	mov	r22, r18
     678:	0e 94 4c 04 	call	0x898	; 0x898 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
}
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <nrf24_isSending>:

uint8_t nrf24_isSending()
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	1f 92       	push	r1
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
     69c:	0e 94 5f 03 	call	0x6be	; 0x6be <nrf24_getStatus>
     6a0:	89 83       	std	Y+1, r24	; 0x01
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	80 73       	andi	r24, 0x30	; 48
     6aa:	99 27       	eor	r25, r25
     6ac:	00 97       	sbiw	r24, 0x00	; 0
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <nrf24_isSending+0x22>
    {        
        return 0; /* false */
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <nrf24_isSending+0x24>
    }

    return 1; /* true */
     6b4:	81 e0       	ldi	r24, 0x01	; 1

}
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
     6d4:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    return rv;
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
}
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	1f 92       	push	r1
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;

    rv = nrf24_getStatus();
     6f0:	0e 94 5f 03 	call	0x6be	; 0x6be <nrf24_getStatus>
     6f4:	89 83       	std	Y+1, r24	; 0x01

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	80 72       	andi	r24, 0x20	; 32
     6fe:	99 27       	eor	r25, r25
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	11 f0       	breq	.+4      	; 0x708 <nrf24_lastMessageStatus+0x22>
    {
        return NRF24_TRANSMISSON_OK;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0a c0       	rjmp	.+20     	; 0x71c <nrf24_lastMessageStatus+0x36>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	80 71       	andi	r24, 0x10	; 16
     710:	99 27       	eor	r25, r25
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	11 f0       	breq	.+4      	; 0x71a <nrf24_lastMessageStatus+0x34>
    {
        return NRF24_MESSAGE_LOST;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	01 c0       	rjmp	.+2      	; 0x71c <nrf24_lastMessageStatus+0x36>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
     71a:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{     
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
    nrf24_csn_digitalWrite(LOW);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
     732:	82 ee       	ldi	r24, 0xE2	; 226
     734:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     73e:	60 e7       	ldi	r22, 0x70	; 112
     740:	87 e0       	ldi	r24, 0x07	; 7
     742:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
     74c:	6b e0       	ldi	r22, 0x0B	; 11
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     768:	60 e7       	ldi	r22, 0x70	; 112
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
     770:	6a e0       	ldi	r22, 0x0A	; 10
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <nrf24_powerDown>:

void nrf24_powerDown()
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
    nrf24_ce_digitalWrite(LOW);
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
     78c:	68 e0       	ldi	r22, 0x08	; 8
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrf24_configRegister>
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <spi_transfer>:

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <spi_transfer+0x6>
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0;
     7a8:	19 82       	std	Y+1, r1	; 0x01
    uint8_t rx = 0;    
     7aa:	1a 82       	std	Y+2, r1	; 0x02

    nrf24_sck_digitalWrite(LOW);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 42 05 	call	0xa84	; 0xa84 <nrf24_sck_digitalWrite>

    for(i=0;i<8;i++)
     7b2:	19 82       	std	Y+1, r1	; 0x01
     7b4:	30 c0       	rjmp	.+96     	; 0x816 <spi_transfer+0x7c>
    {

        if(tx & (1<<(7-i)))
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	88 2f       	mov	r24, r24
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	29 81       	ldd	r18, Y+1	; 0x01
     7be:	22 2f       	mov	r18, r18
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	47 e0       	ldi	r20, 0x07	; 7
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	ba 01       	movw	r22, r20
     7c8:	62 1b       	sub	r22, r18
     7ca:	73 0b       	sbc	r23, r19
     7cc:	9b 01       	movw	r18, r22
     7ce:	02 2e       	mov	r0, r18
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <spi_transfer+0x3c>
     7d2:	95 95       	asr	r25
     7d4:	87 95       	ror	r24
     7d6:	0a 94       	dec	r0
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <spi_transfer+0x38>
     7da:	81 70       	andi	r24, 0x01	; 1
     7dc:	99 27       	eor	r25, r25
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	21 f0       	breq	.+8      	; 0x7ea <spi_transfer+0x50>
        {
            nrf24_mosi_digitalWrite(HIGH);            
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 62 05 	call	0xac4	; 0xac4 <nrf24_mosi_digitalWrite>
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <spi_transfer+0x56>
        }
        else
        {
            nrf24_mosi_digitalWrite(LOW);
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 62 05 	call	0xac4	; 0xac4 <nrf24_mosi_digitalWrite>
        }

        nrf24_sck_digitalWrite(HIGH);        
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	0e 94 42 05 	call	0xa84	; 0xa84 <nrf24_sck_digitalWrite>

        rx = rx << 1;
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	88 0f       	add	r24, r24
     7fa:	8a 83       	std	Y+2, r24	; 0x02
        if(nrf24_miso_digitalRead())
     7fc:	0e 94 82 05 	call	0xb04	; 0xb04 <nrf24_miso_digitalRead>
     800:	88 23       	and	r24, r24
     802:	19 f0       	breq	.+6      	; 0x80a <spi_transfer+0x70>
        {
            rx |= 0x01;
     804:	8a 81       	ldd	r24, Y+2	; 0x02
     806:	81 60       	ori	r24, 0x01	; 1
     808:	8a 83       	std	Y+2, r24	; 0x02
        }

        nrf24_sck_digitalWrite(LOW);                
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 42 05 	call	0xa84	; 0xa84 <nrf24_sck_digitalWrite>
    uint8_t i = 0;
    uint8_t rx = 0;    

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	88 30       	cpi	r24, 0x08	; 8
     81a:	68 f2       	brcs	.-102    	; 0x7b6 <spi_transfer+0x1c>

        nrf24_sck_digitalWrite(LOW);                

    }

    return rx;
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	00 d0       	rcall	.+0      	; 0x834 <nrf24_transferSync+0xa>
     834:	00 d0       	rcall	.+0      	; 0x836 <nrf24_transferSync+0xc>
     836:	00 d0       	rcall	.+0      	; 0x838 <nrf24_transferSync+0xe>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	9b 83       	std	Y+3, r25	; 0x03
     83e:	8a 83       	std	Y+2, r24	; 0x02
     840:	7d 83       	std	Y+5, r23	; 0x05
     842:	6c 83       	std	Y+4, r22	; 0x04
     844:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
     846:	19 82       	std	Y+1, r1	; 0x01
     848:	18 c0       	rjmp	.+48     	; 0x87a <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 2f       	mov	r24, r24
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	2c 81       	ldd	r18, Y+4	; 0x04
     852:	3d 81       	ldd	r19, Y+5	; 0x05
     854:	89 01       	movw	r16, r18
     856:	08 0f       	add	r16, r24
     858:	19 1f       	adc	r17, r25
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	2a 81       	ldd	r18, Y+2	; 0x02
     862:	3b 81       	ldd	r19, Y+3	; 0x03
     864:	82 0f       	add	r24, r18
     866:	93 1f       	adc	r25, r19
     868:	fc 01       	movw	r30, r24
     86a:	80 81       	ld	r24, Z
     86c:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
     870:	f8 01       	movw	r30, r16
     872:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	99 81       	ldd	r25, Y+1	; 0x01
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	98 17       	cp	r25, r24
     880:	20 f3       	brcs	.-56     	; 0x84a <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
     882:	26 96       	adiw	r28, 0x06	; 6
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	08 95       	ret

00000898 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	00 d0       	rcall	.+0      	; 0x89e <nrf24_transmitSync+0x6>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <nrf24_transmitSync+0x8>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	9b 83       	std	Y+3, r25	; 0x03
     8a6:	8a 83       	std	Y+2, r24	; 0x02
     8a8:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
     8aa:	19 82       	std	Y+1, r1	; 0x01
     8ac:	0e c0       	rjmp	.+28     	; 0x8ca <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	2a 81       	ldd	r18, Y+2	; 0x02
     8b6:	3b 81       	ldd	r19, Y+3	; 0x03
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	fc 01       	movw	r30, r24
     8be:	80 81       	ld	r24, Z
     8c0:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	99 81       	ldd	r25, Y+1	; 0x01
     8cc:	8c 81       	ldd	r24, Y+4	; 0x04
     8ce:	98 17       	cp	r25, r24
     8d0:	70 f3       	brcs	.-36     	; 0x8ae <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <nrf24_configRegister+0x6>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	6a 83       	std	Y+2, r22	; 0x02
    nrf24_csn_digitalWrite(LOW);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	8f 71       	andi	r24, 0x1F	; 31
     8f8:	80 62       	ori	r24, 0x20	; 32
     8fa:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    spi_transfer(value);
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
}
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	00 d0       	rcall	.+0      	; 0x91a <nrf24_readRegister+0x6>
     91a:	00 d0       	rcall	.+0      	; 0x91c <nrf24_readRegister+0x8>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	7b 83       	std	Y+3, r23	; 0x03
     924:	6a 83       	std	Y+2, r22	; 0x02
     926:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	8f 71       	andi	r24, 0x1F	; 31
     932:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    nrf24_transferSync(value,value,len);
     936:	2a 81       	ldd	r18, Y+2	; 0x02
     938:	3b 81       	ldd	r19, Y+3	; 0x03
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	9b 81       	ldd	r25, Y+3	; 0x03
     93e:	4c 81       	ldd	r20, Y+4	; 0x04
     940:	b9 01       	movw	r22, r18
     942:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
}
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	00 d0       	rcall	.+0      	; 0x960 <nrf24_writeRegister+0x6>
     960:	00 d0       	rcall	.+0      	; 0x962 <nrf24_writeRegister+0x8>
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	7b 83       	std	Y+3, r23	; 0x03
     96a:	6a 83       	std	Y+2, r22	; 0x02
     96c:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	8f 71       	andi	r24, 0x1F	; 31
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_transfer>
    nrf24_transmitSync(value,len);
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	9b 81       	ldd	r25, Y+3	; 0x03
     982:	6c 81       	ldd	r22, Y+4	; 0x04
     984:	0e 94 4c 04 	call	0x898	; 0x898 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 22 05 	call	0xa44	; 0xa44 <nrf24_csn_digitalWrite>
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <nrf24_setupPins>:
#define MISO_BIT 	4

#define MISO_PIN	PINB

/* ------------------------------------------------------------------------- */
void nrf24_setupPins(){
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
    set_bit(CE_DDR, CE_BIT); // CE output
     9a4:	87 e2       	ldi	r24, 0x27	; 39
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	27 e2       	ldi	r18, 0x27	; 39
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	20 62       	ori	r18, 0x20	; 32
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
    set_bit(CSN_DDR, CSN_BIT); // CSN output
     9b6:	87 e2       	ldi	r24, 0x27	; 39
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	27 e2       	ldi	r18, 0x27	; 39
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	f9 01       	movw	r30, r18
     9c0:	20 81       	ld	r18, Z
     9c2:	20 61       	ori	r18, 0x10	; 16
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
    set_bit(SCK_DDR, SCK_BIT); // SCK output
     9c8:	84 e2       	ldi	r24, 0x24	; 36
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	24 e2       	ldi	r18, 0x24	; 36
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	20 62       	ori	r18, 0x20	; 32
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
    set_bit(MOSI_DDR, MOSI_BIT); // MOSI output
     9da:	84 e2       	ldi	r24, 0x24	; 36
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	24 e2       	ldi	r18, 0x24	; 36
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	f9 01       	movw	r30, r18
     9e4:	20 81       	ld	r18, Z
     9e6:	28 60       	ori	r18, 0x08	; 8
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
    clr_bit(MISO_DDR, MISO_BIT); // MISO input
     9ec:	84 e2       	ldi	r24, 0x24	; 36
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	24 e2       	ldi	r18, 0x24	; 36
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	2f 7e       	andi	r18, 0xEF	; 239
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state){
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	1f 92       	push	r1
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	89 83       	std	Y+1, r24	; 0x01
    if(state){
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	88 23       	and	r24, r24
     a14:	51 f0       	breq	.+20     	; 0xa2a <nrf24_ce_digitalWrite+0x26>
        set_bit(CE_PORT, CE_BIT);
     a16:	88 e2       	ldi	r24, 0x28	; 40
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	28 e2       	ldi	r18, 0x28	; 40
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	20 62       	ori	r18, 0x20	; 32
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	09 c0       	rjmp	.+18     	; 0xa3c <nrf24_ce_digitalWrite+0x38>
    }
    else{
        clr_bit(CE_PORT, CE_BIT);
     a2a:	88 e2       	ldi	r24, 0x28	; 40
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	28 e2       	ldi	r18, 0x28	; 40
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	2f 7d       	andi	r18, 0xDF	; 223
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
    }
}
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state){
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	1f 92       	push	r1
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	89 83       	std	Y+1, r24	; 0x01
    if(state){
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	88 23       	and	r24, r24
     a54:	51 f0       	breq	.+20     	; 0xa6a <nrf24_csn_digitalWrite+0x26>
        set_bit(CSN_PORT, CSN_BIT);
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	28 e2       	ldi	r18, 0x28	; 40
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	20 61       	ori	r18, 0x10	; 16
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <nrf24_csn_digitalWrite+0x38>
    }
    else{
        clr_bit(CSN_PORT, CSN_BIT);
     a6a:	88 e2       	ldi	r24, 0x28	; 40
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	28 e2       	ldi	r18, 0x28	; 40
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	f9 01       	movw	r30, r18
     a74:	20 81       	ld	r18, Z
     a76:	2f 7e       	andi	r18, 0xEF	; 239
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
    }
}
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state){
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	1f 92       	push	r1
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	89 83       	std	Y+1, r24	; 0x01
    if(state){
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	88 23       	and	r24, r24
     a94:	51 f0       	breq	.+20     	; 0xaaa <nrf24_sck_digitalWrite+0x26>
        set_bit(SCK_PORT, SCK_BIT);
     a96:	85 e2       	ldi	r24, 0x25	; 37
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	25 e2       	ldi	r18, 0x25	; 37
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	f9 01       	movw	r30, r18
     aa0:	20 81       	ld	r18, Z
     aa2:	20 62       	ori	r18, 0x20	; 32
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <nrf24_sck_digitalWrite+0x38>
    }
    else{
        clr_bit(SCK_PORT, SCK_BIT);
     aaa:	85 e2       	ldi	r24, 0x25	; 37
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	25 e2       	ldi	r18, 0x25	; 37
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	2f 7d       	andi	r18, 0xDF	; 223
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
    }
}
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state){
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	1f 92       	push	r1
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	89 83       	std	Y+1, r24	; 0x01
    if(state){
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	88 23       	and	r24, r24
     ad4:	51 f0       	breq	.+20     	; 0xaea <nrf24_mosi_digitalWrite+0x26>
        set_bit(MOSI_PORT, MOSI_BIT);
     ad6:	85 e2       	ldi	r24, 0x25	; 37
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	25 e2       	ldi	r18, 0x25	; 37
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	28 60       	ori	r18, 0x08	; 8
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <nrf24_mosi_digitalWrite+0x38>
    }
    else{
        clr_bit(MOSI_PORT, MOSI_BIT);
     aea:	85 e2       	ldi	r24, 0x25	; 37
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	25 e2       	ldi	r18, 0x25	; 37
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	20 81       	ld	r18, Z
     af6:	27 7f       	andi	r18, 0xF7	; 247
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
    }
}
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead(){
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
    return check_bit(MISO_PIN, MISO_BIT);
     b0c:	83 e2       	ldi	r24, 0x23	; 35
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	80 71       	andi	r24, 0x10	; 16
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <__subsf3>:
     b1c:	50 58       	subi	r21, 0x80	; 128

00000b1e <__addsf3>:
     b1e:	bb 27       	eor	r27, r27
     b20:	aa 27       	eor	r26, r26
     b22:	0e d0       	rcall	.+28     	; 0xb40 <__addsf3x>
     b24:	4d c1       	rjmp	.+666    	; 0xdc0 <__fp_round>
     b26:	3e d1       	rcall	.+636    	; 0xda4 <__fp_pscA>
     b28:	30 f0       	brcs	.+12     	; 0xb36 <__addsf3+0x18>
     b2a:	43 d1       	rcall	.+646    	; 0xdb2 <__fp_pscB>
     b2c:	20 f0       	brcs	.+8      	; 0xb36 <__addsf3+0x18>
     b2e:	31 f4       	brne	.+12     	; 0xb3c <__addsf3+0x1e>
     b30:	9f 3f       	cpi	r25, 0xFF	; 255
     b32:	11 f4       	brne	.+4      	; 0xb38 <__addsf3+0x1a>
     b34:	1e f4       	brtc	.+6      	; 0xb3c <__addsf3+0x1e>
     b36:	33 c1       	rjmp	.+614    	; 0xd9e <__fp_nan>
     b38:	0e f4       	brtc	.+2      	; 0xb3c <__addsf3+0x1e>
     b3a:	e0 95       	com	r30
     b3c:	e7 fb       	bst	r30, 7
     b3e:	29 c1       	rjmp	.+594    	; 0xd92 <__fp_inf>

00000b40 <__addsf3x>:
     b40:	e9 2f       	mov	r30, r25
     b42:	4f d1       	rcall	.+670    	; 0xde2 <__fp_split3>
     b44:	80 f3       	brcs	.-32     	; 0xb26 <__addsf3+0x8>
     b46:	ba 17       	cp	r27, r26
     b48:	62 07       	cpc	r22, r18
     b4a:	73 07       	cpc	r23, r19
     b4c:	84 07       	cpc	r24, r20
     b4e:	95 07       	cpc	r25, r21
     b50:	18 f0       	brcs	.+6      	; 0xb58 <__addsf3x+0x18>
     b52:	71 f4       	brne	.+28     	; 0xb70 <__addsf3x+0x30>
     b54:	9e f5       	brtc	.+102    	; 0xbbc <__addsf3x+0x7c>
     b56:	67 c1       	rjmp	.+718    	; 0xe26 <__fp_zero>
     b58:	0e f4       	brtc	.+2      	; 0xb5c <__addsf3x+0x1c>
     b5a:	e0 95       	com	r30
     b5c:	0b 2e       	mov	r0, r27
     b5e:	ba 2f       	mov	r27, r26
     b60:	a0 2d       	mov	r26, r0
     b62:	0b 01       	movw	r0, r22
     b64:	b9 01       	movw	r22, r18
     b66:	90 01       	movw	r18, r0
     b68:	0c 01       	movw	r0, r24
     b6a:	ca 01       	movw	r24, r20
     b6c:	a0 01       	movw	r20, r0
     b6e:	11 24       	eor	r1, r1
     b70:	ff 27       	eor	r31, r31
     b72:	59 1b       	sub	r21, r25
     b74:	99 f0       	breq	.+38     	; 0xb9c <__addsf3x+0x5c>
     b76:	59 3f       	cpi	r21, 0xF9	; 249
     b78:	50 f4       	brcc	.+20     	; 0xb8e <__addsf3x+0x4e>
     b7a:	50 3e       	cpi	r21, 0xE0	; 224
     b7c:	68 f1       	brcs	.+90     	; 0xbd8 <__addsf3x+0x98>
     b7e:	1a 16       	cp	r1, r26
     b80:	f0 40       	sbci	r31, 0x00	; 0
     b82:	a2 2f       	mov	r26, r18
     b84:	23 2f       	mov	r18, r19
     b86:	34 2f       	mov	r19, r20
     b88:	44 27       	eor	r20, r20
     b8a:	58 5f       	subi	r21, 0xF8	; 248
     b8c:	f3 cf       	rjmp	.-26     	; 0xb74 <__addsf3x+0x34>
     b8e:	46 95       	lsr	r20
     b90:	37 95       	ror	r19
     b92:	27 95       	ror	r18
     b94:	a7 95       	ror	r26
     b96:	f0 40       	sbci	r31, 0x00	; 0
     b98:	53 95       	inc	r21
     b9a:	c9 f7       	brne	.-14     	; 0xb8e <__addsf3x+0x4e>
     b9c:	7e f4       	brtc	.+30     	; 0xbbc <__addsf3x+0x7c>
     b9e:	1f 16       	cp	r1, r31
     ba0:	ba 0b       	sbc	r27, r26
     ba2:	62 0b       	sbc	r22, r18
     ba4:	73 0b       	sbc	r23, r19
     ba6:	84 0b       	sbc	r24, r20
     ba8:	ba f0       	brmi	.+46     	; 0xbd8 <__addsf3x+0x98>
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	a1 f0       	breq	.+40     	; 0xbd6 <__addsf3x+0x96>
     bae:	ff 0f       	add	r31, r31
     bb0:	bb 1f       	adc	r27, r27
     bb2:	66 1f       	adc	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	88 1f       	adc	r24, r24
     bb8:	c2 f7       	brpl	.-16     	; 0xbaa <__addsf3x+0x6a>
     bba:	0e c0       	rjmp	.+28     	; 0xbd8 <__addsf3x+0x98>
     bbc:	ba 0f       	add	r27, r26
     bbe:	62 1f       	adc	r22, r18
     bc0:	73 1f       	adc	r23, r19
     bc2:	84 1f       	adc	r24, r20
     bc4:	48 f4       	brcc	.+18     	; 0xbd8 <__addsf3x+0x98>
     bc6:	87 95       	ror	r24
     bc8:	77 95       	ror	r23
     bca:	67 95       	ror	r22
     bcc:	b7 95       	ror	r27
     bce:	f7 95       	ror	r31
     bd0:	9e 3f       	cpi	r25, 0xFE	; 254
     bd2:	08 f0       	brcs	.+2      	; 0xbd6 <__addsf3x+0x96>
     bd4:	b3 cf       	rjmp	.-154    	; 0xb3c <__addsf3+0x1e>
     bd6:	93 95       	inc	r25
     bd8:	88 0f       	add	r24, r24
     bda:	08 f0       	brcs	.+2      	; 0xbde <__addsf3x+0x9e>
     bdc:	99 27       	eor	r25, r25
     bde:	ee 0f       	add	r30, r30
     be0:	97 95       	ror	r25
     be2:	87 95       	ror	r24
     be4:	08 95       	ret

00000be6 <__divsf3>:
     be6:	0c d0       	rcall	.+24     	; 0xc00 <__divsf3x>
     be8:	eb c0       	rjmp	.+470    	; 0xdc0 <__fp_round>
     bea:	e3 d0       	rcall	.+454    	; 0xdb2 <__fp_pscB>
     bec:	40 f0       	brcs	.+16     	; 0xbfe <__divsf3+0x18>
     bee:	da d0       	rcall	.+436    	; 0xda4 <__fp_pscA>
     bf0:	30 f0       	brcs	.+12     	; 0xbfe <__divsf3+0x18>
     bf2:	21 f4       	brne	.+8      	; 0xbfc <__divsf3+0x16>
     bf4:	5f 3f       	cpi	r21, 0xFF	; 255
     bf6:	19 f0       	breq	.+6      	; 0xbfe <__divsf3+0x18>
     bf8:	cc c0       	rjmp	.+408    	; 0xd92 <__fp_inf>
     bfa:	51 11       	cpse	r21, r1
     bfc:	15 c1       	rjmp	.+554    	; 0xe28 <__fp_szero>
     bfe:	cf c0       	rjmp	.+414    	; 0xd9e <__fp_nan>

00000c00 <__divsf3x>:
     c00:	f0 d0       	rcall	.+480    	; 0xde2 <__fp_split3>
     c02:	98 f3       	brcs	.-26     	; 0xbea <__divsf3+0x4>

00000c04 <__divsf3_pse>:
     c04:	99 23       	and	r25, r25
     c06:	c9 f3       	breq	.-14     	; 0xbfa <__divsf3+0x14>
     c08:	55 23       	and	r21, r21
     c0a:	b1 f3       	breq	.-20     	; 0xbf8 <__divsf3+0x12>
     c0c:	95 1b       	sub	r25, r21
     c0e:	55 0b       	sbc	r21, r21
     c10:	bb 27       	eor	r27, r27
     c12:	aa 27       	eor	r26, r26
     c14:	62 17       	cp	r22, r18
     c16:	73 07       	cpc	r23, r19
     c18:	84 07       	cpc	r24, r20
     c1a:	38 f0       	brcs	.+14     	; 0xc2a <__divsf3_pse+0x26>
     c1c:	9f 5f       	subi	r25, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	aa 1f       	adc	r26, r26
     c28:	a9 f3       	breq	.-22     	; 0xc14 <__divsf3_pse+0x10>
     c2a:	33 d0       	rcall	.+102    	; 0xc92 <__divsf3_pse+0x8e>
     c2c:	0e 2e       	mov	r0, r30
     c2e:	3a f0       	brmi	.+14     	; 0xc3e <__divsf3_pse+0x3a>
     c30:	e0 e8       	ldi	r30, 0x80	; 128
     c32:	30 d0       	rcall	.+96     	; 0xc94 <__divsf3_pse+0x90>
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	50 40       	sbci	r21, 0x00	; 0
     c38:	e6 95       	lsr	r30
     c3a:	00 1c       	adc	r0, r0
     c3c:	ca f7       	brpl	.-14     	; 0xc30 <__divsf3_pse+0x2c>
     c3e:	29 d0       	rcall	.+82     	; 0xc92 <__divsf3_pse+0x8e>
     c40:	fe 2f       	mov	r31, r30
     c42:	27 d0       	rcall	.+78     	; 0xc92 <__divsf3_pse+0x8e>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	bb 1f       	adc	r27, r27
     c4c:	26 17       	cp	r18, r22
     c4e:	37 07       	cpc	r19, r23
     c50:	48 07       	cpc	r20, r24
     c52:	ab 07       	cpc	r26, r27
     c54:	b0 e8       	ldi	r27, 0x80	; 128
     c56:	09 f0       	breq	.+2      	; 0xc5a <__divsf3_pse+0x56>
     c58:	bb 0b       	sbc	r27, r27
     c5a:	80 2d       	mov	r24, r0
     c5c:	bf 01       	movw	r22, r30
     c5e:	ff 27       	eor	r31, r31
     c60:	93 58       	subi	r25, 0x83	; 131
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	2a f0       	brmi	.+10     	; 0xc70 <__divsf3_pse+0x6c>
     c66:	9e 3f       	cpi	r25, 0xFE	; 254
     c68:	51 05       	cpc	r21, r1
     c6a:	68 f0       	brcs	.+26     	; 0xc86 <__divsf3_pse+0x82>
     c6c:	92 c0       	rjmp	.+292    	; 0xd92 <__fp_inf>
     c6e:	dc c0       	rjmp	.+440    	; 0xe28 <__fp_szero>
     c70:	5f 3f       	cpi	r21, 0xFF	; 255
     c72:	ec f3       	brlt	.-6      	; 0xc6e <__divsf3_pse+0x6a>
     c74:	98 3e       	cpi	r25, 0xE8	; 232
     c76:	dc f3       	brlt	.-10     	; 0xc6e <__divsf3_pse+0x6a>
     c78:	86 95       	lsr	r24
     c7a:	77 95       	ror	r23
     c7c:	67 95       	ror	r22
     c7e:	b7 95       	ror	r27
     c80:	f7 95       	ror	r31
     c82:	9f 5f       	subi	r25, 0xFF	; 255
     c84:	c9 f7       	brne	.-14     	; 0xc78 <__divsf3_pse+0x74>
     c86:	88 0f       	add	r24, r24
     c88:	91 1d       	adc	r25, r1
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	97 f9       	bld	r25, 7
     c90:	08 95       	ret
     c92:	e1 e0       	ldi	r30, 0x01	; 1
     c94:	66 0f       	add	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	bb 1f       	adc	r27, r27
     c9c:	62 17       	cp	r22, r18
     c9e:	73 07       	cpc	r23, r19
     ca0:	84 07       	cpc	r24, r20
     ca2:	ba 07       	cpc	r27, r26
     ca4:	20 f0       	brcs	.+8      	; 0xcae <__divsf3_pse+0xaa>
     ca6:	62 1b       	sub	r22, r18
     ca8:	73 0b       	sbc	r23, r19
     caa:	84 0b       	sbc	r24, r20
     cac:	ba 0b       	sbc	r27, r26
     cae:	ee 1f       	adc	r30, r30
     cb0:	88 f7       	brcc	.-30     	; 0xc94 <__divsf3_pse+0x90>
     cb2:	e0 95       	com	r30
     cb4:	08 95       	ret

00000cb6 <__fixsfsi>:
     cb6:	04 d0       	rcall	.+8      	; 0xcc0 <__fixunssfsi>
     cb8:	68 94       	set
     cba:	b1 11       	cpse	r27, r1
     cbc:	b5 c0       	rjmp	.+362    	; 0xe28 <__fp_szero>
     cbe:	08 95       	ret

00000cc0 <__fixunssfsi>:
     cc0:	98 d0       	rcall	.+304    	; 0xdf2 <__fp_splitA>
     cc2:	88 f0       	brcs	.+34     	; 0xce6 <__fixunssfsi+0x26>
     cc4:	9f 57       	subi	r25, 0x7F	; 127
     cc6:	90 f0       	brcs	.+36     	; 0xcec <__fixunssfsi+0x2c>
     cc8:	b9 2f       	mov	r27, r25
     cca:	99 27       	eor	r25, r25
     ccc:	b7 51       	subi	r27, 0x17	; 23
     cce:	a0 f0       	brcs	.+40     	; 0xcf8 <__fixunssfsi+0x38>
     cd0:	d1 f0       	breq	.+52     	; 0xd06 <__fixunssfsi+0x46>
     cd2:	66 0f       	add	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	88 1f       	adc	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	1a f0       	brmi	.+6      	; 0xce2 <__fixunssfsi+0x22>
     cdc:	ba 95       	dec	r27
     cde:	c9 f7       	brne	.-14     	; 0xcd2 <__fixunssfsi+0x12>
     ce0:	12 c0       	rjmp	.+36     	; 0xd06 <__fixunssfsi+0x46>
     ce2:	b1 30       	cpi	r27, 0x01	; 1
     ce4:	81 f0       	breq	.+32     	; 0xd06 <__fixunssfsi+0x46>
     ce6:	9f d0       	rcall	.+318    	; 0xe26 <__fp_zero>
     ce8:	b1 e0       	ldi	r27, 0x01	; 1
     cea:	08 95       	ret
     cec:	9c c0       	rjmp	.+312    	; 0xe26 <__fp_zero>
     cee:	67 2f       	mov	r22, r23
     cf0:	78 2f       	mov	r23, r24
     cf2:	88 27       	eor	r24, r24
     cf4:	b8 5f       	subi	r27, 0xF8	; 248
     cf6:	39 f0       	breq	.+14     	; 0xd06 <__fixunssfsi+0x46>
     cf8:	b9 3f       	cpi	r27, 0xF9	; 249
     cfa:	cc f3       	brlt	.-14     	; 0xcee <__fixunssfsi+0x2e>
     cfc:	86 95       	lsr	r24
     cfe:	77 95       	ror	r23
     d00:	67 95       	ror	r22
     d02:	b3 95       	inc	r27
     d04:	d9 f7       	brne	.-10     	; 0xcfc <__fixunssfsi+0x3c>
     d06:	3e f4       	brtc	.+14     	; 0xd16 <__fixunssfsi+0x56>
     d08:	90 95       	com	r25
     d0a:	80 95       	com	r24
     d0c:	70 95       	com	r23
     d0e:	61 95       	neg	r22
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	8f 4f       	sbci	r24, 0xFF	; 255
     d14:	9f 4f       	sbci	r25, 0xFF	; 255
     d16:	08 95       	ret

00000d18 <__floatunsisf>:
     d18:	e8 94       	clt
     d1a:	09 c0       	rjmp	.+18     	; 0xd2e <__floatsisf+0x12>

00000d1c <__floatsisf>:
     d1c:	97 fb       	bst	r25, 7
     d1e:	3e f4       	brtc	.+14     	; 0xd2e <__floatsisf+0x12>
     d20:	90 95       	com	r25
     d22:	80 95       	com	r24
     d24:	70 95       	com	r23
     d26:	61 95       	neg	r22
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	99 23       	and	r25, r25
     d30:	a9 f0       	breq	.+42     	; 0xd5c <__floatsisf+0x40>
     d32:	f9 2f       	mov	r31, r25
     d34:	96 e9       	ldi	r25, 0x96	; 150
     d36:	bb 27       	eor	r27, r27
     d38:	93 95       	inc	r25
     d3a:	f6 95       	lsr	r31
     d3c:	87 95       	ror	r24
     d3e:	77 95       	ror	r23
     d40:	67 95       	ror	r22
     d42:	b7 95       	ror	r27
     d44:	f1 11       	cpse	r31, r1
     d46:	f8 cf       	rjmp	.-16     	; 0xd38 <__floatsisf+0x1c>
     d48:	fa f4       	brpl	.+62     	; 0xd88 <__floatsisf+0x6c>
     d4a:	bb 0f       	add	r27, r27
     d4c:	11 f4       	brne	.+4      	; 0xd52 <__floatsisf+0x36>
     d4e:	60 ff       	sbrs	r22, 0
     d50:	1b c0       	rjmp	.+54     	; 0xd88 <__floatsisf+0x6c>
     d52:	6f 5f       	subi	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	8f 4f       	sbci	r24, 0xFF	; 255
     d58:	9f 4f       	sbci	r25, 0xFF	; 255
     d5a:	16 c0       	rjmp	.+44     	; 0xd88 <__floatsisf+0x6c>
     d5c:	88 23       	and	r24, r24
     d5e:	11 f0       	breq	.+4      	; 0xd64 <__floatsisf+0x48>
     d60:	96 e9       	ldi	r25, 0x96	; 150
     d62:	11 c0       	rjmp	.+34     	; 0xd86 <__floatsisf+0x6a>
     d64:	77 23       	and	r23, r23
     d66:	21 f0       	breq	.+8      	; 0xd70 <__floatsisf+0x54>
     d68:	9e e8       	ldi	r25, 0x8E	; 142
     d6a:	87 2f       	mov	r24, r23
     d6c:	76 2f       	mov	r23, r22
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__floatsisf+0x5e>
     d70:	66 23       	and	r22, r22
     d72:	71 f0       	breq	.+28     	; 0xd90 <__floatsisf+0x74>
     d74:	96 e8       	ldi	r25, 0x86	; 134
     d76:	86 2f       	mov	r24, r22
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	2a f0       	brmi	.+10     	; 0xd88 <__floatsisf+0x6c>
     d7e:	9a 95       	dec	r25
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	da f7       	brpl	.-10     	; 0xd7e <__floatsisf+0x62>
     d88:	88 0f       	add	r24, r24
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	97 f9       	bld	r25, 7
     d90:	08 95       	ret

00000d92 <__fp_inf>:
     d92:	97 f9       	bld	r25, 7
     d94:	9f 67       	ori	r25, 0x7F	; 127
     d96:	80 e8       	ldi	r24, 0x80	; 128
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	08 95       	ret

00000d9e <__fp_nan>:
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
     da0:	80 ec       	ldi	r24, 0xC0	; 192
     da2:	08 95       	ret

00000da4 <__fp_pscA>:
     da4:	00 24       	eor	r0, r0
     da6:	0a 94       	dec	r0
     da8:	16 16       	cp	r1, r22
     daa:	17 06       	cpc	r1, r23
     dac:	18 06       	cpc	r1, r24
     dae:	09 06       	cpc	r0, r25
     db0:	08 95       	ret

00000db2 <__fp_pscB>:
     db2:	00 24       	eor	r0, r0
     db4:	0a 94       	dec	r0
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	14 06       	cpc	r1, r20
     dbc:	05 06       	cpc	r0, r21
     dbe:	08 95       	ret

00000dc0 <__fp_round>:
     dc0:	09 2e       	mov	r0, r25
     dc2:	03 94       	inc	r0
     dc4:	00 0c       	add	r0, r0
     dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0xc>
     dc8:	88 23       	and	r24, r24
     dca:	52 f0       	brmi	.+20     	; 0xde0 <__fp_round+0x20>
     dcc:	bb 0f       	add	r27, r27
     dce:	40 f4       	brcc	.+16     	; 0xde0 <__fp_round+0x20>
     dd0:	bf 2b       	or	r27, r31
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <__fp_round+0x18>
     dd4:	60 ff       	sbrs	r22, 0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__fp_round+0x20>
     dd8:	6f 5f       	subi	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	08 95       	ret

00000de2 <__fp_split3>:
     de2:	57 fd       	sbrc	r21, 7
     de4:	90 58       	subi	r25, 0x80	; 128
     de6:	44 0f       	add	r20, r20
     de8:	55 1f       	adc	r21, r21
     dea:	59 f0       	breq	.+22     	; 0xe02 <__fp_splitA+0x10>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	71 f0       	breq	.+28     	; 0xe0c <__fp_splitA+0x1a>
     df0:	47 95       	ror	r20

00000df2 <__fp_splitA>:
     df2:	88 0f       	add	r24, r24
     df4:	97 fb       	bst	r25, 7
     df6:	99 1f       	adc	r25, r25
     df8:	61 f0       	breq	.+24     	; 0xe12 <__fp_splitA+0x20>
     dfa:	9f 3f       	cpi	r25, 0xFF	; 255
     dfc:	79 f0       	breq	.+30     	; 0xe1c <__fp_splitA+0x2a>
     dfe:	87 95       	ror	r24
     e00:	08 95       	ret
     e02:	12 16       	cp	r1, r18
     e04:	13 06       	cpc	r1, r19
     e06:	14 06       	cpc	r1, r20
     e08:	55 1f       	adc	r21, r21
     e0a:	f2 cf       	rjmp	.-28     	; 0xdf0 <__fp_split3+0xe>
     e0c:	46 95       	lsr	r20
     e0e:	f1 df       	rcall	.-30     	; 0xdf2 <__fp_splitA>
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <__fp_splitA+0x30>
     e12:	16 16       	cp	r1, r22
     e14:	17 06       	cpc	r1, r23
     e16:	18 06       	cpc	r1, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	f1 cf       	rjmp	.-30     	; 0xdfe <__fp_splitA+0xc>
     e1c:	86 95       	lsr	r24
     e1e:	71 05       	cpc	r23, r1
     e20:	61 05       	cpc	r22, r1
     e22:	08 94       	sec
     e24:	08 95       	ret

00000e26 <__fp_zero>:
     e26:	e8 94       	clt

00000e28 <__fp_szero>:
     e28:	bb 27       	eor	r27, r27
     e2a:	66 27       	eor	r22, r22
     e2c:	77 27       	eor	r23, r23
     e2e:	cb 01       	movw	r24, r22
     e30:	97 f9       	bld	r25, 7
     e32:	08 95       	ret

00000e34 <__mulsf3>:
     e34:	0b d0       	rcall	.+22     	; 0xe4c <__mulsf3x>
     e36:	c4 cf       	rjmp	.-120    	; 0xdc0 <__fp_round>
     e38:	b5 df       	rcall	.-150    	; 0xda4 <__fp_pscA>
     e3a:	28 f0       	brcs	.+10     	; 0xe46 <__mulsf3+0x12>
     e3c:	ba df       	rcall	.-140    	; 0xdb2 <__fp_pscB>
     e3e:	18 f0       	brcs	.+6      	; 0xe46 <__mulsf3+0x12>
     e40:	95 23       	and	r25, r21
     e42:	09 f0       	breq	.+2      	; 0xe46 <__mulsf3+0x12>
     e44:	a6 cf       	rjmp	.-180    	; 0xd92 <__fp_inf>
     e46:	ab cf       	rjmp	.-170    	; 0xd9e <__fp_nan>
     e48:	11 24       	eor	r1, r1
     e4a:	ee cf       	rjmp	.-36     	; 0xe28 <__fp_szero>

00000e4c <__mulsf3x>:
     e4c:	ca df       	rcall	.-108    	; 0xde2 <__fp_split3>
     e4e:	a0 f3       	brcs	.-24     	; 0xe38 <__mulsf3+0x4>

00000e50 <__mulsf3_pse>:
     e50:	95 9f       	mul	r25, r21
     e52:	d1 f3       	breq	.-12     	; 0xe48 <__mulsf3+0x14>
     e54:	95 0f       	add	r25, r21
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	55 1f       	adc	r21, r21
     e5a:	62 9f       	mul	r22, r18
     e5c:	f0 01       	movw	r30, r0
     e5e:	72 9f       	mul	r23, r18
     e60:	bb 27       	eor	r27, r27
     e62:	f0 0d       	add	r31, r0
     e64:	b1 1d       	adc	r27, r1
     e66:	63 9f       	mul	r22, r19
     e68:	aa 27       	eor	r26, r26
     e6a:	f0 0d       	add	r31, r0
     e6c:	b1 1d       	adc	r27, r1
     e6e:	aa 1f       	adc	r26, r26
     e70:	64 9f       	mul	r22, r20
     e72:	66 27       	eor	r22, r22
     e74:	b0 0d       	add	r27, r0
     e76:	a1 1d       	adc	r26, r1
     e78:	66 1f       	adc	r22, r22
     e7a:	82 9f       	mul	r24, r18
     e7c:	22 27       	eor	r18, r18
     e7e:	b0 0d       	add	r27, r0
     e80:	a1 1d       	adc	r26, r1
     e82:	62 1f       	adc	r22, r18
     e84:	73 9f       	mul	r23, r19
     e86:	b0 0d       	add	r27, r0
     e88:	a1 1d       	adc	r26, r1
     e8a:	62 1f       	adc	r22, r18
     e8c:	83 9f       	mul	r24, r19
     e8e:	a0 0d       	add	r26, r0
     e90:	61 1d       	adc	r22, r1
     e92:	22 1f       	adc	r18, r18
     e94:	74 9f       	mul	r23, r20
     e96:	33 27       	eor	r19, r19
     e98:	a0 0d       	add	r26, r0
     e9a:	61 1d       	adc	r22, r1
     e9c:	23 1f       	adc	r18, r19
     e9e:	84 9f       	mul	r24, r20
     ea0:	60 0d       	add	r22, r0
     ea2:	21 1d       	adc	r18, r1
     ea4:	82 2f       	mov	r24, r18
     ea6:	76 2f       	mov	r23, r22
     ea8:	6a 2f       	mov	r22, r26
     eaa:	11 24       	eor	r1, r1
     eac:	9f 57       	subi	r25, 0x7F	; 127
     eae:	50 40       	sbci	r21, 0x00	; 0
     eb0:	8a f0       	brmi	.+34     	; 0xed4 <__mulsf3_pse+0x84>
     eb2:	e1 f0       	breq	.+56     	; 0xeec <__mulsf3_pse+0x9c>
     eb4:	88 23       	and	r24, r24
     eb6:	4a f0       	brmi	.+18     	; 0xeca <__mulsf3_pse+0x7a>
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	bb 1f       	adc	r27, r27
     ebe:	66 1f       	adc	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	91 50       	subi	r25, 0x01	; 1
     ec6:	50 40       	sbci	r21, 0x00	; 0
     ec8:	a9 f7       	brne	.-22     	; 0xeb4 <__mulsf3_pse+0x64>
     eca:	9e 3f       	cpi	r25, 0xFE	; 254
     ecc:	51 05       	cpc	r21, r1
     ece:	70 f0       	brcs	.+28     	; 0xeec <__mulsf3_pse+0x9c>
     ed0:	60 cf       	rjmp	.-320    	; 0xd92 <__fp_inf>
     ed2:	aa cf       	rjmp	.-172    	; 0xe28 <__fp_szero>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	ec f3       	brlt	.-6      	; 0xed2 <__mulsf3_pse+0x82>
     ed8:	98 3e       	cpi	r25, 0xE8	; 232
     eda:	dc f3       	brlt	.-10     	; 0xed2 <__mulsf3_pse+0x82>
     edc:	86 95       	lsr	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f7 95       	ror	r31
     ee6:	e7 95       	ror	r30
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	c1 f7       	brne	.-16     	; 0xedc <__mulsf3_pse+0x8c>
     eec:	fe 2b       	or	r31, r30
     eee:	88 0f       	add	r24, r24
     ef0:	91 1d       	adc	r25, r1
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	97 f9       	bld	r25, 7
     ef8:	08 95       	ret

00000efa <round>:
     efa:	7b df       	rcall	.-266    	; 0xdf2 <__fp_splitA>
     efc:	e0 f0       	brcs	.+56     	; 0xf36 <round+0x3c>
     efe:	9e 37       	cpi	r25, 0x7E	; 126
     f00:	d8 f0       	brcs	.+54     	; 0xf38 <round+0x3e>
     f02:	96 39       	cpi	r25, 0x96	; 150
     f04:	b8 f4       	brcc	.+46     	; 0xf34 <round+0x3a>
     f06:	9e 38       	cpi	r25, 0x8E	; 142
     f08:	48 f4       	brcc	.+18     	; 0xf1c <round+0x22>
     f0a:	67 2f       	mov	r22, r23
     f0c:	78 2f       	mov	r23, r24
     f0e:	88 27       	eor	r24, r24
     f10:	98 5f       	subi	r25, 0xF8	; 248
     f12:	f9 cf       	rjmp	.-14     	; 0xf06 <round+0xc>
     f14:	86 95       	lsr	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	93 95       	inc	r25
     f1c:	95 39       	cpi	r25, 0x95	; 149
     f1e:	d0 f3       	brcs	.-12     	; 0xf14 <round+0x1a>
     f20:	b6 2f       	mov	r27, r22
     f22:	b1 70       	andi	r27, 0x01	; 1
     f24:	6b 0f       	add	r22, r27
     f26:	71 1d       	adc	r23, r1
     f28:	81 1d       	adc	r24, r1
     f2a:	20 f4       	brcc	.+8      	; 0xf34 <round+0x3a>
     f2c:	87 95       	ror	r24
     f2e:	77 95       	ror	r23
     f30:	67 95       	ror	r22
     f32:	93 95       	inc	r25
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <__fp_mintl>
     f36:	1c c0       	rjmp	.+56     	; 0xf70 <__fp_mpack>
     f38:	77 cf       	rjmp	.-274    	; 0xe28 <__fp_szero>

00000f3a <__fp_mintl>:
     f3a:	88 23       	and	r24, r24
     f3c:	71 f4       	brne	.+28     	; 0xf5a <__fp_mintl+0x20>
     f3e:	77 23       	and	r23, r23
     f40:	21 f0       	breq	.+8      	; 0xf4a <__fp_mintl+0x10>
     f42:	98 50       	subi	r25, 0x08	; 8
     f44:	87 2b       	or	r24, r23
     f46:	76 2f       	mov	r23, r22
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <__fp_mintl+0x1e>
     f4a:	66 23       	and	r22, r22
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_mintl+0x18>
     f4e:	99 27       	eor	r25, r25
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <__fp_mintl+0x32>
     f52:	90 51       	subi	r25, 0x10	; 16
     f54:	86 2b       	or	r24, r22
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	2a f0       	brmi	.+10     	; 0xf66 <__fp_mintl+0x2c>
     f5c:	9a 95       	dec	r25
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	da f7       	brpl	.-10     	; 0xf5c <__fp_mintl+0x22>
     f66:	88 0f       	add	r24, r24
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret

00000f70 <__fp_mpack>:
     f70:	9f 3f       	cpi	r25, 0xFF	; 255
     f72:	31 f0       	breq	.+12     	; 0xf80 <__fp_mpack_finite+0xc>

00000f74 <__fp_mpack_finite>:
     f74:	91 50       	subi	r25, 0x01	; 1
     f76:	20 f4       	brcc	.+8      	; 0xf80 <__fp_mpack_finite+0xc>
     f78:	87 95       	ror	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b7 95       	ror	r27
     f80:	88 0f       	add	r24, r24
     f82:	91 1d       	adc	r25, r1
     f84:	96 95       	lsr	r25
     f86:	87 95       	ror	r24
     f88:	97 f9       	bld	r25, 7
     f8a:	08 95       	ret

00000f8c <sprintf>:
     f8c:	ae e0       	ldi	r26, 0x0E	; 14
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ec ec       	ldi	r30, 0xCC	; 204
     f92:	f7 e0       	ldi	r31, 0x07	; 7
     f94:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__prologue_saves__+0x1c>
     f98:	0d 89       	ldd	r16, Y+21	; 0x15
     f9a:	1e 89       	ldd	r17, Y+22	; 0x16
     f9c:	86 e0       	ldi	r24, 0x06	; 6
     f9e:	8c 83       	std	Y+4, r24	; 0x04
     fa0:	1a 83       	std	Y+2, r17	; 0x02
     fa2:	09 83       	std	Y+1, r16	; 0x01
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	9f e7       	ldi	r25, 0x7F	; 127
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	ae 01       	movw	r20, r28
     fae:	47 5e       	subi	r20, 0xE7	; 231
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	6f 89       	ldd	r22, Y+23	; 0x17
     fb4:	78 8d       	ldd	r23, Y+24	; 0x18
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <vfprintf>
     fbe:	ef 81       	ldd	r30, Y+7	; 0x07
     fc0:	f8 85       	ldd	r31, Y+8	; 0x08
     fc2:	e0 0f       	add	r30, r16
     fc4:	f1 1f       	adc	r31, r17
     fc6:	10 82       	st	Z, r1
     fc8:	2e 96       	adiw	r28, 0x0e	; 14
     fca:	e4 e0       	ldi	r30, 0x04	; 4
     fcc:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__epilogue_restores__+0x1c>

00000fd0 <vfprintf>:
     fd0:	ac e0       	ldi	r26, 0x0C	; 12
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ee ee       	ldi	r30, 0xEE	; 238
     fd6:	f7 e0       	ldi	r31, 0x07	; 7
     fd8:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__prologue_saves__>
     fdc:	7c 01       	movw	r14, r24
     fde:	6b 01       	movw	r12, r22
     fe0:	8a 01       	movw	r16, r20
     fe2:	fc 01       	movw	r30, r24
     fe4:	17 82       	std	Z+7, r1	; 0x07
     fe6:	16 82       	std	Z+6, r1	; 0x06
     fe8:	83 81       	ldd	r24, Z+3	; 0x03
     fea:	81 ff       	sbrs	r24, 1
     fec:	bd c1       	rjmp	.+890    	; 0x1368 <vfprintf+0x398>
     fee:	ce 01       	movw	r24, r28
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	4c 01       	movw	r8, r24
     ff4:	f7 01       	movw	r30, r14
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	f6 01       	movw	r30, r12
     ffa:	93 fd       	sbrc	r25, 3
     ffc:	85 91       	lpm	r24, Z+
     ffe:	93 ff       	sbrs	r25, 3
    1000:	81 91       	ld	r24, Z+
    1002:	6f 01       	movw	r12, r30
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <vfprintf+0x3a>
    1008:	ab c1       	rjmp	.+854    	; 0x1360 <vfprintf+0x390>
    100a:	85 32       	cpi	r24, 0x25	; 37
    100c:	39 f4       	brne	.+14     	; 0x101c <vfprintf+0x4c>
    100e:	93 fd       	sbrc	r25, 3
    1010:	85 91       	lpm	r24, Z+
    1012:	93 ff       	sbrs	r25, 3
    1014:	81 91       	ld	r24, Z+
    1016:	6f 01       	movw	r12, r30
    1018:	85 32       	cpi	r24, 0x25	; 37
    101a:	29 f4       	brne	.+10     	; 0x1026 <vfprintf+0x56>
    101c:	b7 01       	movw	r22, r14
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    1024:	e7 cf       	rjmp	.-50     	; 0xff4 <vfprintf+0x24>
    1026:	51 2c       	mov	r5, r1
    1028:	31 2c       	mov	r3, r1
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	20 32       	cpi	r18, 0x20	; 32
    102e:	a0 f4       	brcc	.+40     	; 0x1058 <vfprintf+0x88>
    1030:	8b 32       	cpi	r24, 0x2B	; 43
    1032:	69 f0       	breq	.+26     	; 0x104e <vfprintf+0x7e>
    1034:	30 f4       	brcc	.+12     	; 0x1042 <vfprintf+0x72>
    1036:	80 32       	cpi	r24, 0x20	; 32
    1038:	59 f0       	breq	.+22     	; 0x1050 <vfprintf+0x80>
    103a:	83 32       	cpi	r24, 0x23	; 35
    103c:	69 f4       	brne	.+26     	; 0x1058 <vfprintf+0x88>
    103e:	20 61       	ori	r18, 0x10	; 16
    1040:	2c c0       	rjmp	.+88     	; 0x109a <vfprintf+0xca>
    1042:	8d 32       	cpi	r24, 0x2D	; 45
    1044:	39 f0       	breq	.+14     	; 0x1054 <vfprintf+0x84>
    1046:	80 33       	cpi	r24, 0x30	; 48
    1048:	39 f4       	brne	.+14     	; 0x1058 <vfprintf+0x88>
    104a:	21 60       	ori	r18, 0x01	; 1
    104c:	26 c0       	rjmp	.+76     	; 0x109a <vfprintf+0xca>
    104e:	22 60       	ori	r18, 0x02	; 2
    1050:	24 60       	ori	r18, 0x04	; 4
    1052:	23 c0       	rjmp	.+70     	; 0x109a <vfprintf+0xca>
    1054:	28 60       	ori	r18, 0x08	; 8
    1056:	21 c0       	rjmp	.+66     	; 0x109a <vfprintf+0xca>
    1058:	27 fd       	sbrc	r18, 7
    105a:	27 c0       	rjmp	.+78     	; 0x10aa <vfprintf+0xda>
    105c:	30 ed       	ldi	r19, 0xD0	; 208
    105e:	38 0f       	add	r19, r24
    1060:	3a 30       	cpi	r19, 0x0A	; 10
    1062:	78 f4       	brcc	.+30     	; 0x1082 <vfprintf+0xb2>
    1064:	26 ff       	sbrs	r18, 6
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <vfprintf+0xa4>
    1068:	fa e0       	ldi	r31, 0x0A	; 10
    106a:	5f 9e       	mul	r5, r31
    106c:	30 0d       	add	r19, r0
    106e:	11 24       	eor	r1, r1
    1070:	53 2e       	mov	r5, r19
    1072:	13 c0       	rjmp	.+38     	; 0x109a <vfprintf+0xca>
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	38 9e       	mul	r3, r24
    1078:	30 0d       	add	r19, r0
    107a:	11 24       	eor	r1, r1
    107c:	33 2e       	mov	r3, r19
    107e:	20 62       	ori	r18, 0x20	; 32
    1080:	0c c0       	rjmp	.+24     	; 0x109a <vfprintf+0xca>
    1082:	8e 32       	cpi	r24, 0x2E	; 46
    1084:	21 f4       	brne	.+8      	; 0x108e <vfprintf+0xbe>
    1086:	26 fd       	sbrc	r18, 6
    1088:	6b c1       	rjmp	.+726    	; 0x1360 <vfprintf+0x390>
    108a:	20 64       	ori	r18, 0x40	; 64
    108c:	06 c0       	rjmp	.+12     	; 0x109a <vfprintf+0xca>
    108e:	8c 36       	cpi	r24, 0x6C	; 108
    1090:	11 f4       	brne	.+4      	; 0x1096 <vfprintf+0xc6>
    1092:	20 68       	ori	r18, 0x80	; 128
    1094:	02 c0       	rjmp	.+4      	; 0x109a <vfprintf+0xca>
    1096:	88 36       	cpi	r24, 0x68	; 104
    1098:	41 f4       	brne	.+16     	; 0x10aa <vfprintf+0xda>
    109a:	f6 01       	movw	r30, r12
    109c:	93 fd       	sbrc	r25, 3
    109e:	85 91       	lpm	r24, Z+
    10a0:	93 ff       	sbrs	r25, 3
    10a2:	81 91       	ld	r24, Z+
    10a4:	6f 01       	movw	r12, r30
    10a6:	81 11       	cpse	r24, r1
    10a8:	c1 cf       	rjmp	.-126    	; 0x102c <vfprintf+0x5c>
    10aa:	98 2f       	mov	r25, r24
    10ac:	9f 7d       	andi	r25, 0xDF	; 223
    10ae:	95 54       	subi	r25, 0x45	; 69
    10b0:	93 30       	cpi	r25, 0x03	; 3
    10b2:	28 f4       	brcc	.+10     	; 0x10be <vfprintf+0xee>
    10b4:	0c 5f       	subi	r16, 0xFC	; 252
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	ff e3       	ldi	r31, 0x3F	; 63
    10ba:	f9 83       	std	Y+1, r31	; 0x01
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <vfprintf+0x108>
    10be:	83 36       	cpi	r24, 0x63	; 99
    10c0:	31 f0       	breq	.+12     	; 0x10ce <vfprintf+0xfe>
    10c2:	83 37       	cpi	r24, 0x73	; 115
    10c4:	71 f0       	breq	.+28     	; 0x10e2 <vfprintf+0x112>
    10c6:	83 35       	cpi	r24, 0x53	; 83
    10c8:	09 f0       	breq	.+2      	; 0x10cc <vfprintf+0xfc>
    10ca:	5b c0       	rjmp	.+182    	; 0x1182 <vfprintf+0x1b2>
    10cc:	22 c0       	rjmp	.+68     	; 0x1112 <vfprintf+0x142>
    10ce:	f8 01       	movw	r30, r16
    10d0:	80 81       	ld	r24, Z
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	0e 5f       	subi	r16, 0xFE	; 254
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
    10d8:	44 24       	eor	r4, r4
    10da:	43 94       	inc	r4
    10dc:	51 2c       	mov	r5, r1
    10de:	54 01       	movw	r10, r8
    10e0:	15 c0       	rjmp	.+42     	; 0x110c <vfprintf+0x13c>
    10e2:	38 01       	movw	r6, r16
    10e4:	f2 e0       	ldi	r31, 0x02	; 2
    10e6:	6f 0e       	add	r6, r31
    10e8:	71 1c       	adc	r7, r1
    10ea:	f8 01       	movw	r30, r16
    10ec:	a0 80       	ld	r10, Z
    10ee:	b1 80       	ldd	r11, Z+1	; 0x01
    10f0:	26 ff       	sbrs	r18, 6
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <vfprintf+0x12a>
    10f4:	65 2d       	mov	r22, r5
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <vfprintf+0x12e>
    10fa:	6f ef       	ldi	r22, 0xFF	; 255
    10fc:	7f ef       	ldi	r23, 0xFF	; 255
    10fe:	c5 01       	movw	r24, r10
    1100:	2c 87       	std	Y+12, r18	; 0x0c
    1102:	0e 94 c5 09 	call	0x138a	; 0x138a <strnlen>
    1106:	2c 01       	movw	r4, r24
    1108:	83 01       	movw	r16, r6
    110a:	2c 85       	ldd	r18, Y+12	; 0x0c
    110c:	2f 77       	andi	r18, 0x7F	; 127
    110e:	22 2e       	mov	r2, r18
    1110:	17 c0       	rjmp	.+46     	; 0x1140 <vfprintf+0x170>
    1112:	38 01       	movw	r6, r16
    1114:	f2 e0       	ldi	r31, 0x02	; 2
    1116:	6f 0e       	add	r6, r31
    1118:	71 1c       	adc	r7, r1
    111a:	f8 01       	movw	r30, r16
    111c:	a0 80       	ld	r10, Z
    111e:	b1 80       	ldd	r11, Z+1	; 0x01
    1120:	26 ff       	sbrs	r18, 6
    1122:	03 c0       	rjmp	.+6      	; 0x112a <vfprintf+0x15a>
    1124:	65 2d       	mov	r22, r5
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x15e>
    112a:	6f ef       	ldi	r22, 0xFF	; 255
    112c:	7f ef       	ldi	r23, 0xFF	; 255
    112e:	c5 01       	movw	r24, r10
    1130:	2c 87       	std	Y+12, r18	; 0x0c
    1132:	0e 94 ba 09 	call	0x1374	; 0x1374 <strnlen_P>
    1136:	2c 01       	movw	r4, r24
    1138:	2c 85       	ldd	r18, Y+12	; 0x0c
    113a:	20 68       	ori	r18, 0x80	; 128
    113c:	22 2e       	mov	r2, r18
    113e:	83 01       	movw	r16, r6
    1140:	23 fc       	sbrc	r2, 3
    1142:	1b c0       	rjmp	.+54     	; 0x117a <vfprintf+0x1aa>
    1144:	83 2d       	mov	r24, r3
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	48 16       	cp	r4, r24
    114a:	59 06       	cpc	r5, r25
    114c:	b0 f4       	brcc	.+44     	; 0x117a <vfprintf+0x1aa>
    114e:	b7 01       	movw	r22, r14
    1150:	80 e2       	ldi	r24, 0x20	; 32
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    1158:	3a 94       	dec	r3
    115a:	f4 cf       	rjmp	.-24     	; 0x1144 <vfprintf+0x174>
    115c:	f5 01       	movw	r30, r10
    115e:	27 fc       	sbrc	r2, 7
    1160:	85 91       	lpm	r24, Z+
    1162:	27 fe       	sbrs	r2, 7
    1164:	81 91       	ld	r24, Z+
    1166:	5f 01       	movw	r10, r30
    1168:	b7 01       	movw	r22, r14
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    1170:	31 10       	cpse	r3, r1
    1172:	3a 94       	dec	r3
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	4f 1a       	sub	r4, r31
    1178:	51 08       	sbc	r5, r1
    117a:	41 14       	cp	r4, r1
    117c:	51 04       	cpc	r5, r1
    117e:	71 f7       	brne	.-36     	; 0x115c <vfprintf+0x18c>
    1180:	e5 c0       	rjmp	.+458    	; 0x134c <vfprintf+0x37c>
    1182:	84 36       	cpi	r24, 0x64	; 100
    1184:	11 f0       	breq	.+4      	; 0x118a <vfprintf+0x1ba>
    1186:	89 36       	cpi	r24, 0x69	; 105
    1188:	39 f5       	brne	.+78     	; 0x11d8 <vfprintf+0x208>
    118a:	f8 01       	movw	r30, r16
    118c:	27 ff       	sbrs	r18, 7
    118e:	07 c0       	rjmp	.+14     	; 0x119e <vfprintf+0x1ce>
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	0c 5f       	subi	r16, 0xFC	; 252
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <vfprintf+0x1de>
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	88 27       	eor	r24, r24
    11a4:	77 fd       	sbrc	r23, 7
    11a6:	80 95       	com	r24
    11a8:	98 2f       	mov	r25, r24
    11aa:	0e 5f       	subi	r16, 0xFE	; 254
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	2f 76       	andi	r18, 0x6F	; 111
    11b0:	b2 2e       	mov	r11, r18
    11b2:	97 ff       	sbrs	r25, 7
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <vfprintf+0x1f8>
    11b6:	90 95       	com	r25
    11b8:	80 95       	com	r24
    11ba:	70 95       	com	r23
    11bc:	61 95       	neg	r22
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	20 68       	ori	r18, 0x80	; 128
    11c6:	b2 2e       	mov	r11, r18
    11c8:	2a e0       	ldi	r18, 0x0A	; 10
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	a4 01       	movw	r20, r8
    11ce:	0e 94 02 0a 	call	0x1404	; 0x1404 <__ultoa_invert>
    11d2:	a8 2e       	mov	r10, r24
    11d4:	a8 18       	sub	r10, r8
    11d6:	44 c0       	rjmp	.+136    	; 0x1260 <vfprintf+0x290>
    11d8:	85 37       	cpi	r24, 0x75	; 117
    11da:	29 f4       	brne	.+10     	; 0x11e6 <vfprintf+0x216>
    11dc:	2f 7e       	andi	r18, 0xEF	; 239
    11de:	b2 2e       	mov	r11, r18
    11e0:	2a e0       	ldi	r18, 0x0A	; 10
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	25 c0       	rjmp	.+74     	; 0x1230 <vfprintf+0x260>
    11e6:	f2 2f       	mov	r31, r18
    11e8:	f9 7f       	andi	r31, 0xF9	; 249
    11ea:	bf 2e       	mov	r11, r31
    11ec:	8f 36       	cpi	r24, 0x6F	; 111
    11ee:	c1 f0       	breq	.+48     	; 0x1220 <vfprintf+0x250>
    11f0:	18 f4       	brcc	.+6      	; 0x11f8 <vfprintf+0x228>
    11f2:	88 35       	cpi	r24, 0x58	; 88
    11f4:	79 f0       	breq	.+30     	; 0x1214 <vfprintf+0x244>
    11f6:	b4 c0       	rjmp	.+360    	; 0x1360 <vfprintf+0x390>
    11f8:	80 37       	cpi	r24, 0x70	; 112
    11fa:	19 f0       	breq	.+6      	; 0x1202 <vfprintf+0x232>
    11fc:	88 37       	cpi	r24, 0x78	; 120
    11fe:	21 f0       	breq	.+8      	; 0x1208 <vfprintf+0x238>
    1200:	af c0       	rjmp	.+350    	; 0x1360 <vfprintf+0x390>
    1202:	2f 2f       	mov	r18, r31
    1204:	20 61       	ori	r18, 0x10	; 16
    1206:	b2 2e       	mov	r11, r18
    1208:	b4 fe       	sbrs	r11, 4
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <vfprintf+0x256>
    120c:	8b 2d       	mov	r24, r11
    120e:	84 60       	ori	r24, 0x04	; 4
    1210:	b8 2e       	mov	r11, r24
    1212:	09 c0       	rjmp	.+18     	; 0x1226 <vfprintf+0x256>
    1214:	24 ff       	sbrs	r18, 4
    1216:	0a c0       	rjmp	.+20     	; 0x122c <vfprintf+0x25c>
    1218:	9f 2f       	mov	r25, r31
    121a:	96 60       	ori	r25, 0x06	; 6
    121c:	b9 2e       	mov	r11, r25
    121e:	06 c0       	rjmp	.+12     	; 0x122c <vfprintf+0x25c>
    1220:	28 e0       	ldi	r18, 0x08	; 8
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <vfprintf+0x260>
    1226:	20 e1       	ldi	r18, 0x10	; 16
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <vfprintf+0x260>
    122c:	20 e1       	ldi	r18, 0x10	; 16
    122e:	32 e0       	ldi	r19, 0x02	; 2
    1230:	f8 01       	movw	r30, r16
    1232:	b7 fe       	sbrs	r11, 7
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <vfprintf+0x274>
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	0c 5f       	subi	r16, 0xFC	; 252
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <vfprintf+0x280>
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 5f       	subi	r16, 0xFE	; 254
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	a4 01       	movw	r20, r8
    1252:	0e 94 02 0a 	call	0x1404	; 0x1404 <__ultoa_invert>
    1256:	a8 2e       	mov	r10, r24
    1258:	a8 18       	sub	r10, r8
    125a:	fb 2d       	mov	r31, r11
    125c:	ff 77       	andi	r31, 0x7F	; 127
    125e:	bf 2e       	mov	r11, r31
    1260:	b6 fe       	sbrs	r11, 6
    1262:	0b c0       	rjmp	.+22     	; 0x127a <vfprintf+0x2aa>
    1264:	2b 2d       	mov	r18, r11
    1266:	2e 7f       	andi	r18, 0xFE	; 254
    1268:	a5 14       	cp	r10, r5
    126a:	50 f4       	brcc	.+20     	; 0x1280 <vfprintf+0x2b0>
    126c:	b4 fe       	sbrs	r11, 4
    126e:	0a c0       	rjmp	.+20     	; 0x1284 <vfprintf+0x2b4>
    1270:	b2 fc       	sbrc	r11, 2
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <vfprintf+0x2b4>
    1274:	2b 2d       	mov	r18, r11
    1276:	2e 7e       	andi	r18, 0xEE	; 238
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <vfprintf+0x2b4>
    127a:	7a 2c       	mov	r7, r10
    127c:	2b 2d       	mov	r18, r11
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <vfprintf+0x2b6>
    1280:	7a 2c       	mov	r7, r10
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x2b6>
    1284:	75 2c       	mov	r7, r5
    1286:	24 ff       	sbrs	r18, 4
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <vfprintf+0x2d4>
    128a:	fe 01       	movw	r30, r28
    128c:	ea 0d       	add	r30, r10
    128e:	f1 1d       	adc	r31, r1
    1290:	80 81       	ld	r24, Z
    1292:	80 33       	cpi	r24, 0x30	; 48
    1294:	11 f4       	brne	.+4      	; 0x129a <vfprintf+0x2ca>
    1296:	29 7e       	andi	r18, 0xE9	; 233
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <vfprintf+0x2dc>
    129a:	22 ff       	sbrs	r18, 2
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <vfprintf+0x2da>
    129e:	73 94       	inc	r7
    12a0:	73 94       	inc	r7
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <vfprintf+0x2dc>
    12a4:	82 2f       	mov	r24, r18
    12a6:	86 78       	andi	r24, 0x86	; 134
    12a8:	09 f0       	breq	.+2      	; 0x12ac <vfprintf+0x2dc>
    12aa:	73 94       	inc	r7
    12ac:	23 fd       	sbrc	r18, 3
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <vfprintf+0x306>
    12b0:	20 ff       	sbrs	r18, 0
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <vfprintf+0x2f0>
    12b4:	5a 2c       	mov	r5, r10
    12b6:	73 14       	cp	r7, r3
    12b8:	18 f4       	brcc	.+6      	; 0x12c0 <vfprintf+0x2f0>
    12ba:	53 0c       	add	r5, r3
    12bc:	57 18       	sub	r5, r7
    12be:	73 2c       	mov	r7, r3
    12c0:	73 14       	cp	r7, r3
    12c2:	68 f4       	brcc	.+26     	; 0x12de <vfprintf+0x30e>
    12c4:	b7 01       	movw	r22, r14
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	2c 87       	std	Y+12, r18	; 0x0c
    12cc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    12d0:	73 94       	inc	r7
    12d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d4:	f5 cf       	rjmp	.-22     	; 0x12c0 <vfprintf+0x2f0>
    12d6:	73 14       	cp	r7, r3
    12d8:	10 f4       	brcc	.+4      	; 0x12de <vfprintf+0x30e>
    12da:	37 18       	sub	r3, r7
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <vfprintf+0x310>
    12de:	31 2c       	mov	r3, r1
    12e0:	24 ff       	sbrs	r18, 4
    12e2:	12 c0       	rjmp	.+36     	; 0x1308 <vfprintf+0x338>
    12e4:	b7 01       	movw	r22, r14
    12e6:	80 e3       	ldi	r24, 0x30	; 48
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	2c 87       	std	Y+12, r18	; 0x0c
    12ec:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    12f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    12f2:	22 ff       	sbrs	r18, 2
    12f4:	17 c0       	rjmp	.+46     	; 0x1324 <vfprintf+0x354>
    12f6:	21 ff       	sbrs	r18, 1
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <vfprintf+0x330>
    12fa:	88 e5       	ldi	r24, 0x58	; 88
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0x334>
    1300:	88 e7       	ldi	r24, 0x78	; 120
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	b7 01       	movw	r22, r14
    1306:	0c c0       	rjmp	.+24     	; 0x1320 <vfprintf+0x350>
    1308:	82 2f       	mov	r24, r18
    130a:	86 78       	andi	r24, 0x86	; 134
    130c:	59 f0       	breq	.+22     	; 0x1324 <vfprintf+0x354>
    130e:	21 fd       	sbrc	r18, 1
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x346>
    1312:	80 e2       	ldi	r24, 0x20	; 32
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <vfprintf+0x348>
    1316:	8b e2       	ldi	r24, 0x2B	; 43
    1318:	27 fd       	sbrc	r18, 7
    131a:	8d e2       	ldi	r24, 0x2D	; 45
    131c:	b7 01       	movw	r22, r14
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    1324:	a5 14       	cp	r10, r5
    1326:	38 f4       	brcc	.+14     	; 0x1336 <vfprintf+0x366>
    1328:	b7 01       	movw	r22, r14
    132a:	80 e3       	ldi	r24, 0x30	; 48
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    1332:	5a 94       	dec	r5
    1334:	f7 cf       	rjmp	.-18     	; 0x1324 <vfprintf+0x354>
    1336:	aa 94       	dec	r10
    1338:	f4 01       	movw	r30, r8
    133a:	ea 0d       	add	r30, r10
    133c:	f1 1d       	adc	r31, r1
    133e:	80 81       	ld	r24, Z
    1340:	b7 01       	movw	r22, r14
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    1348:	a1 10       	cpse	r10, r1
    134a:	f5 cf       	rjmp	.-22     	; 0x1336 <vfprintf+0x366>
    134c:	33 20       	and	r3, r3
    134e:	09 f4       	brne	.+2      	; 0x1352 <vfprintf+0x382>
    1350:	51 ce       	rjmp	.-862    	; 0xff4 <vfprintf+0x24>
    1352:	b7 01       	movw	r22, r14
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <fputc>
    135c:	3a 94       	dec	r3
    135e:	f6 cf       	rjmp	.-20     	; 0x134c <vfprintf+0x37c>
    1360:	f7 01       	movw	r30, r14
    1362:	86 81       	ldd	r24, Z+6	; 0x06
    1364:	97 81       	ldd	r25, Z+7	; 0x07
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x39c>
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	2c 96       	adiw	r28, 0x0c	; 12
    136e:	e2 e1       	ldi	r30, 0x12	; 18
    1370:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__epilogue_restores__>

00001374 <strnlen_P>:
    1374:	fc 01       	movw	r30, r24
    1376:	05 90       	lpm	r0, Z+
    1378:	61 50       	subi	r22, 0x01	; 1
    137a:	70 40       	sbci	r23, 0x00	; 0
    137c:	01 10       	cpse	r0, r1
    137e:	d8 f7       	brcc	.-10     	; 0x1376 <strnlen_P+0x2>
    1380:	80 95       	com	r24
    1382:	90 95       	com	r25
    1384:	8e 0f       	add	r24, r30
    1386:	9f 1f       	adc	r25, r31
    1388:	08 95       	ret

0000138a <strnlen>:
    138a:	fc 01       	movw	r30, r24
    138c:	61 50       	subi	r22, 0x01	; 1
    138e:	70 40       	sbci	r23, 0x00	; 0
    1390:	01 90       	ld	r0, Z+
    1392:	01 10       	cpse	r0, r1
    1394:	d8 f7       	brcc	.-10     	; 0x138c <strnlen+0x2>
    1396:	80 95       	com	r24
    1398:	90 95       	com	r25
    139a:	8e 0f       	add	r24, r30
    139c:	9f 1f       	adc	r25, r31
    139e:	08 95       	ret

000013a0 <fputc>:
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	18 2f       	mov	r17, r24
    13aa:	09 2f       	mov	r16, r25
    13ac:	eb 01       	movw	r28, r22
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	81 fd       	sbrc	r24, 1
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <fputc+0x1a>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	20 c0       	rjmp	.+64     	; 0x13fa <fputc+0x5a>
    13ba:	82 ff       	sbrs	r24, 2
    13bc:	10 c0       	rjmp	.+32     	; 0x13de <fputc+0x3e>
    13be:	4e 81       	ldd	r20, Y+6	; 0x06
    13c0:	5f 81       	ldd	r21, Y+7	; 0x07
    13c2:	2c 81       	ldd	r18, Y+4	; 0x04
    13c4:	3d 81       	ldd	r19, Y+5	; 0x05
    13c6:	42 17       	cp	r20, r18
    13c8:	53 07       	cpc	r21, r19
    13ca:	7c f4       	brge	.+30     	; 0x13ea <fputc+0x4a>
    13cc:	e8 81       	ld	r30, Y
    13ce:	f9 81       	ldd	r31, Y+1	; 0x01
    13d0:	9f 01       	movw	r18, r30
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	39 83       	std	Y+1, r19	; 0x01
    13d8:	28 83       	st	Y, r18
    13da:	10 83       	st	Z, r17
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <fputc+0x4a>
    13de:	e8 85       	ldd	r30, Y+8	; 0x08
    13e0:	f9 85       	ldd	r31, Y+9	; 0x09
    13e2:	81 2f       	mov	r24, r17
    13e4:	09 95       	icall
    13e6:	89 2b       	or	r24, r25
    13e8:	29 f7       	brne	.-54     	; 0x13b4 <fputc+0x14>
    13ea:	2e 81       	ldd	r18, Y+6	; 0x06
    13ec:	3f 81       	ldd	r19, Y+7	; 0x07
    13ee:	2f 5f       	subi	r18, 0xFF	; 255
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	3f 83       	std	Y+7, r19	; 0x07
    13f4:	2e 83       	std	Y+6, r18	; 0x06
    13f6:	81 2f       	mov	r24, r17
    13f8:	90 2f       	mov	r25, r16
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <__ultoa_invert>:
    1404:	fa 01       	movw	r30, r20
    1406:	aa 27       	eor	r26, r26
    1408:	28 30       	cpi	r18, 0x08	; 8
    140a:	51 f1       	breq	.+84     	; 0x1460 <__ultoa_invert+0x5c>
    140c:	20 31       	cpi	r18, 0x10	; 16
    140e:	81 f1       	breq	.+96     	; 0x1470 <__ultoa_invert+0x6c>
    1410:	e8 94       	clt
    1412:	6f 93       	push	r22
    1414:	6e 7f       	andi	r22, 0xFE	; 254
    1416:	6e 5f       	subi	r22, 0xFE	; 254
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	af 4f       	sbci	r26, 0xFF	; 255
    1420:	b1 e0       	ldi	r27, 0x01	; 1
    1422:	3e d0       	rcall	.+124    	; 0x14a0 <__ultoa_invert+0x9c>
    1424:	b4 e0       	ldi	r27, 0x04	; 4
    1426:	3c d0       	rcall	.+120    	; 0x14a0 <__ultoa_invert+0x9c>
    1428:	67 0f       	add	r22, r23
    142a:	78 1f       	adc	r23, r24
    142c:	89 1f       	adc	r24, r25
    142e:	9a 1f       	adc	r25, r26
    1430:	a1 1d       	adc	r26, r1
    1432:	68 0f       	add	r22, r24
    1434:	79 1f       	adc	r23, r25
    1436:	8a 1f       	adc	r24, r26
    1438:	91 1d       	adc	r25, r1
    143a:	a1 1d       	adc	r26, r1
    143c:	6a 0f       	add	r22, r26
    143e:	71 1d       	adc	r23, r1
    1440:	81 1d       	adc	r24, r1
    1442:	91 1d       	adc	r25, r1
    1444:	a1 1d       	adc	r26, r1
    1446:	20 d0       	rcall	.+64     	; 0x1488 <__ultoa_invert+0x84>
    1448:	09 f4       	brne	.+2      	; 0x144c <__ultoa_invert+0x48>
    144a:	68 94       	set
    144c:	3f 91       	pop	r19
    144e:	2a e0       	ldi	r18, 0x0A	; 10
    1450:	26 9f       	mul	r18, r22
    1452:	11 24       	eor	r1, r1
    1454:	30 19       	sub	r19, r0
    1456:	30 5d       	subi	r19, 0xD0	; 208
    1458:	31 93       	st	Z+, r19
    145a:	de f6       	brtc	.-74     	; 0x1412 <__ultoa_invert+0xe>
    145c:	cf 01       	movw	r24, r30
    145e:	08 95       	ret
    1460:	46 2f       	mov	r20, r22
    1462:	47 70       	andi	r20, 0x07	; 7
    1464:	40 5d       	subi	r20, 0xD0	; 208
    1466:	41 93       	st	Z+, r20
    1468:	b3 e0       	ldi	r27, 0x03	; 3
    146a:	0f d0       	rcall	.+30     	; 0x148a <__ultoa_invert+0x86>
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__ultoa_invert+0x5c>
    146e:	f6 cf       	rjmp	.-20     	; 0x145c <__ultoa_invert+0x58>
    1470:	46 2f       	mov	r20, r22
    1472:	4f 70       	andi	r20, 0x0F	; 15
    1474:	40 5d       	subi	r20, 0xD0	; 208
    1476:	4a 33       	cpi	r20, 0x3A	; 58
    1478:	18 f0       	brcs	.+6      	; 0x1480 <__ultoa_invert+0x7c>
    147a:	49 5d       	subi	r20, 0xD9	; 217
    147c:	31 fd       	sbrc	r19, 1
    147e:	40 52       	subi	r20, 0x20	; 32
    1480:	41 93       	st	Z+, r20
    1482:	02 d0       	rcall	.+4      	; 0x1488 <__ultoa_invert+0x84>
    1484:	a9 f7       	brne	.-22     	; 0x1470 <__ultoa_invert+0x6c>
    1486:	ea cf       	rjmp	.-44     	; 0x145c <__ultoa_invert+0x58>
    1488:	b4 e0       	ldi	r27, 0x04	; 4
    148a:	a6 95       	lsr	r26
    148c:	97 95       	ror	r25
    148e:	87 95       	ror	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	ba 95       	dec	r27
    1496:	c9 f7       	brne	.-14     	; 0x148a <__ultoa_invert+0x86>
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	61 05       	cpc	r22, r1
    149c:	71 05       	cpc	r23, r1
    149e:	08 95       	ret
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	0a 2e       	mov	r0, r26
    14a6:	06 94       	lsr	r0
    14a8:	57 95       	ror	r21
    14aa:	47 95       	ror	r20
    14ac:	37 95       	ror	r19
    14ae:	27 95       	ror	r18
    14b0:	ba 95       	dec	r27
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__ultoa_invert+0xa2>
    14b4:	62 0f       	add	r22, r18
    14b6:	73 1f       	adc	r23, r19
    14b8:	84 1f       	adc	r24, r20
    14ba:	95 1f       	adc	r25, r21
    14bc:	a0 1d       	adc	r26, r0
    14be:	08 95       	ret

000014c0 <__prologue_saves__>:
    14c0:	2f 92       	push	r2
    14c2:	3f 92       	push	r3
    14c4:	4f 92       	push	r4
    14c6:	5f 92       	push	r5
    14c8:	6f 92       	push	r6
    14ca:	7f 92       	push	r7
    14cc:	8f 92       	push	r8
    14ce:	9f 92       	push	r9
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	ca 1b       	sub	r28, r26
    14ea:	db 0b       	sbc	r29, r27
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	09 94       	ijmp

000014f8 <__epilogue_restores__>:
    14f8:	2a 88       	ldd	r2, Y+18	; 0x12
    14fa:	39 88       	ldd	r3, Y+17	; 0x11
    14fc:	48 88       	ldd	r4, Y+16	; 0x10
    14fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1500:	6e 84       	ldd	r6, Y+14	; 0x0e
    1502:	7d 84       	ldd	r7, Y+13	; 0x0d
    1504:	8c 84       	ldd	r8, Y+12	; 0x0c
    1506:	9b 84       	ldd	r9, Y+11	; 0x0b
    1508:	aa 84       	ldd	r10, Y+10	; 0x0a
    150a:	b9 84       	ldd	r11, Y+9	; 0x09
    150c:	c8 84       	ldd	r12, Y+8	; 0x08
    150e:	df 80       	ldd	r13, Y+7	; 0x07
    1510:	ee 80       	ldd	r14, Y+6	; 0x06
    1512:	fd 80       	ldd	r15, Y+5	; 0x05
    1514:	0c 81       	ldd	r16, Y+4	; 0x04
    1516:	1b 81       	ldd	r17, Y+3	; 0x03
    1518:	aa 81       	ldd	r26, Y+2	; 0x02
    151a:	b9 81       	ldd	r27, Y+1	; 0x01
    151c:	ce 0f       	add	r28, r30
    151e:	d1 1d       	adc	r29, r1
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	ed 01       	movw	r28, r26
    152c:	08 95       	ret

0000152e <_exit>:
    152e:	f8 94       	cli

00001530 <__stop_program>:
    1530:	ff cf       	rjmp	.-2      	; 0x1530 <__stop_program>
